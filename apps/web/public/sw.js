/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/sw.ts":
/*!*******************!*\
  !*** ./app/sw.ts ***!
  \*******************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _serwist_next_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/next/worker */ \"../../node_modules/@serwist/next/dist/index.worker.js\");\n/* harmony import */ var _serwist_routing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/routing */ \"../../node_modules/@serwist/routing/dist/index.js\");\n/* harmony import */ var _serwist_strategies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @serwist/strategies */ \"../../node_modules/@serwist/strategies/dist/index.js\");\n/* harmony import */ var _serwist_sw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @serwist/sw */ \"../../node_modules/@serwist/sw/dist/index.js\");\n\n\n\n\n// Define custom caching strategies for MP4 files and images\nconst cacheName = \"media-cache\"; // Name of the cache for MP4 and images\nconst matchCallback = (param)=>{\n    let { url, request } = param;\n    return request.destination === \"image\" || url.pathname.endsWith(\".mp4\");\n};\n// Use a CacheFirst strategy as an example; you can choose other strategies as needed\nconst cachingStrategy = new _serwist_strategies__WEBPACK_IMPORTED_MODULE_2__.CacheFirst({\n    cacheName,\n    plugins: []\n});\n// Register the route with the matching callback and caching strategy\n(0,_serwist_routing__WEBPACK_IMPORTED_MODULE_1__.registerRoute)(matchCallback, cachingStrategy);\nnew _serwist_sw__WEBPACK_IMPORTED_MODULE_3__.Serwist().install({\n    precacheEntries: undefined,\n    skipWaiting: true,\n    clientsClaim: true,\n    navigationPreload: true,\n    runtimeCaching: [\n        ..._serwist_next_worker__WEBPACK_IMPORTED_MODULE_0__.defaultCache\n    ]\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                /* unsupported import.meta.webpackHot */ undefined.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvc3cudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFSDtBQUNBO0FBQ1g7QUFNdEMsNERBQTREO0FBQzVELE1BQU1JLFlBQVksZUFBZSx1Q0FBdUM7QUFDeEUsTUFBTUMsZ0JBQWdCO1FBQUMsRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQWtDO0lBQ3JFLE9BQU9BLFFBQVFDLFdBQVcsS0FBSyxXQUFXRixJQUFJRyxRQUFRLENBQUNDLFFBQVEsQ0FBQztBQUNsRTtBQUVBLHFGQUFxRjtBQUNyRixNQUFNQyxrQkFBa0IsSUFBSVQsMkRBQVVBLENBQUM7SUFDckNFO0lBQ0FRLFNBQVMsRUFFUjtBQUNIO0FBRUEscUVBQXFFO0FBQ3JFWCwrREFBYUEsQ0FBQ0ksZUFBZU07QUFFN0IsSUFBSVIsZ0RBQU9BLEdBQUdVLE9BQU8sQ0FBQztJQUNwQkMsaUJBQWlCQyxLQUFLQyxhQUFhO0lBQ25DQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsbUJBQW1CO0lBQ25CQyxnQkFBZ0I7V0FDWHBCLDhEQUFZQTtLQUVoQjtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9zdy50cz9jYzhjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHRDYWNoZSB9IGZyb20gJ0BzZXJ3aXN0L25leHQvd29ya2VyJztcbmltcG9ydCB0eXBlIHsgUHJlY2FjaGVFbnRyeSB9IGZyb20gJ0BzZXJ3aXN0L3ByZWNhY2hpbmcnO1xuaW1wb3J0IHsgcmVnaXN0ZXJSb3V0ZSB9IGZyb20gJ0BzZXJ3aXN0L3JvdXRpbmcnO1xuaW1wb3J0IHsgQ2FjaGVGaXJzdCB9IGZyb20gJ0BzZXJ3aXN0L3N0cmF0ZWdpZXMnO1xuaW1wb3J0IHsgU2Vyd2lzdCB9IGZyb20gJ0BzZXJ3aXN0L3N3JztcblxuZGVjbGFyZSBjb25zdCBzZWxmOiBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUgJiB7XG4gIF9fU1dfTUFOSUZFU1Q6IChQcmVjYWNoZUVudHJ5IHwgc3RyaW5nKVtdIHwgdW5kZWZpbmVkO1xufTtcblxuLy8gRGVmaW5lIGN1c3RvbSBjYWNoaW5nIHN0cmF0ZWdpZXMgZm9yIE1QNCBmaWxlcyBhbmQgaW1hZ2VzXG5jb25zdCBjYWNoZU5hbWUgPSAnbWVkaWEtY2FjaGUnOyAvLyBOYW1lIG9mIHRoZSBjYWNoZSBmb3IgTVA0IGFuZCBpbWFnZXNcbmNvbnN0IG1hdGNoQ2FsbGJhY2sgPSAoeyB1cmwsIHJlcXVlc3QgfTogeyB1cmw6IFVSTDsgcmVxdWVzdDogUmVxdWVzdCB9KSA9PiB7XG4gIHJldHVybiByZXF1ZXN0LmRlc3RpbmF0aW9uID09PSAnaW1hZ2UnIHx8IHVybC5wYXRobmFtZS5lbmRzV2l0aCgnLm1wNCcpO1xufTtcblxuLy8gVXNlIGEgQ2FjaGVGaXJzdCBzdHJhdGVneSBhcyBhbiBleGFtcGxlOyB5b3UgY2FuIGNob29zZSBvdGhlciBzdHJhdGVnaWVzIGFzIG5lZWRlZFxuY29uc3QgY2FjaGluZ1N0cmF0ZWd5ID0gbmV3IENhY2hlRmlyc3Qoe1xuICBjYWNoZU5hbWUsXG4gIHBsdWdpbnM6IFtcbiAgICAvLyBZb3UgY2FuIGFkZCBwbHVnaW5zIGhlcmUgZm9yIG1vcmUgZnVuY3Rpb25hbGl0eSwgbGlrZSBleHBpcmF0aW9uXG4gIF0sXG59KTtcblxuLy8gUmVnaXN0ZXIgdGhlIHJvdXRlIHdpdGggdGhlIG1hdGNoaW5nIGNhbGxiYWNrIGFuZCBjYWNoaW5nIHN0cmF0ZWd5XG5yZWdpc3RlclJvdXRlKG1hdGNoQ2FsbGJhY2ssIGNhY2hpbmdTdHJhdGVneSk7XG5cbm5ldyBTZXJ3aXN0KCkuaW5zdGFsbCh7XG4gIHByZWNhY2hlRW50cmllczogc2VsZi5fX1NXX01BTklGRVNULFxuICBza2lwV2FpdGluZzogdHJ1ZSxcbiAgY2xpZW50c0NsYWltOiB0cnVlLFxuICBuYXZpZ2F0aW9uUHJlbG9hZDogdHJ1ZSxcbiAgcnVudGltZUNhY2hpbmc6IFtcbiAgICAuLi5kZWZhdWx0Q2FjaGUsXG4gICAgLy8gQWRkIGFueSBhZGRpdGlvbmFsIHJ1bnRpbWUgY2FjaGluZyBydWxlcyBoZXJlXG4gIF0sXG59KTtcbiJdLCJuYW1lcyI6WyJkZWZhdWx0Q2FjaGUiLCJyZWdpc3RlclJvdXRlIiwiQ2FjaGVGaXJzdCIsIlNlcndpc3QiLCJjYWNoZU5hbWUiLCJtYXRjaENhbGxiYWNrIiwidXJsIiwicmVxdWVzdCIsImRlc3RpbmF0aW9uIiwicGF0aG5hbWUiLCJlbmRzV2l0aCIsImNhY2hpbmdTdHJhdGVneSIsInBsdWdpbnMiLCJpbnN0YWxsIiwicHJlY2FjaGVFbnRyaWVzIiwic2VsZiIsIl9fU1dfTUFOSUZFU1QiLCJza2lwV2FpdGluZyIsImNsaWVudHNDbGFpbSIsIm5hdmlnYXRpb25QcmVsb2FkIiwicnVudGltZUNhY2hpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/sw.ts\n"));

/***/ }),

/***/ "../../node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ SerwistError; },\n/* harmony export */   a: function() { return /* binding */ canConstructResponseFromBodyStream; },\n/* harmony export */   c: function() { return /* binding */ cacheNames; },\n/* harmony export */   f: function() { return /* binding */ finalAssertExports; },\n/* harmony export */   l: function() { return /* binding */ logger; },\n/* harmony export */   q: function() { return /* binding */ quotaErrorCallbacks; }\n/* harmony export */ });\nconst _cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"serwist\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst _createCacheName = (cacheName)=>{\n    return [\n        _cacheNameDetails.prefix,\n        cacheName,\n        _cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys(_cacheNameDetails)){\n        fn(key);\n    }\n};\nconst cacheNames = {\n    updateDetails: (details)=>{\n        eachCacheNameDetail((key)=>{\n            const detail = details[key];\n            if (typeof detail === \"string\") {\n                _cacheNameDetails[key] = detail;\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return _cacheNameDetails.suffix;\n    }\n};\n\nconst messages = {\n    \"invalid-value\": ({ paramName, validValueDescription, value })=>{\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName, className, funcName, paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType, paramName, moduleName, className, funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) {\n            return `The return value from '${moduleName}.${classNameStr}${funcName}()' must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod, paramName, moduleName, className, funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry })=>{\n        return `An unexpected entry was passed to '@serwist/precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(entry)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry, secondEntry })=>{\n        if (!firstEntry || !secondEntry) {\n            throw new Error(\"Unexpected input to \" + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${firstEntry} but different revision details. Serwist is unable to cache and version the asset correctly. Please remove one of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage })=>{\n        if (!thrownErrorMessage) {\n            throw new Error(\"Unexpected input to \" + `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugin's 'requestWillFetch()' method. The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId, value })=>{\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for setCacheDetails({${cacheNameId}: '...'}). Received a value of '${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method })=>{\n        if (!method) {\n            throw new Error(\"Unexpected input to \" + `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + \"registered.\";\n    },\n    \"queue-replay-failed\": ({ name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name })=>{\n        return `The Queue name '${name}' is already being used. All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName, paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. Please check the docs for ${moduleName}.${className}.${funcName} for valid input types.`;\n    },\n    \"not-array-of-class\": ({ value, expectedClass, moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of '${expectedClass}' objects. Received '${JSON.stringify(value)},'. Please check the call to ${moduleName}.${className}.${funcName}() to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.maxEntries' or 'config.maxAgeSeconds' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.statuses' or 'config.headers' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"invalid-string\": ({ moduleName, funcName, paramName })=>{\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${moduleName}.${funcName}() for more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + \"expiration plugin with a runtime caching strategy.\";\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return \"No Range header was found in the Request provided.\";\n    },\n    \"range-not-satisfiable\": ({ size, start, end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url, method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url })=>{\n        return `There was an attempt to cache '${url}' but the response was not defined.`;\n    },\n    \"no-response\": ({ url, error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    \"bad-precaching-response\": ({ url, status })=>{\n        return `The precaching request for '${url}' failed${status ? ` with an HTTP status of ${status}.` : \".\"}`;\n    },\n    \"non-precached-url\": ({ url })=>{\n        return `'createHandlerBoundToURL(\"${url}\")' was called, but that URL is not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url })=>{\n        return `Two of the entries passed to '@serwist/precaching.PrecacheController.addToCacheList()' had the URL ${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName, url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin })=>{\n        return `'@serwist/core.copyResponse()' can only be used with same-origin responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type })=>{\n        const message = `One of the '@serwist/streams' sources resulted in an '${type}' response.`;\n        if (type === \"opaqueredirect\") {\n            return `${message} Please do not use a navigation request that results in a redirect as a source.`;\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\nconst fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {})=>{\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nconst messageGenerator =  false ? 0 : generatorFunction;\n\nclass SerwistError extends Error {\n    details;\n    constructor(errorCode, details){\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\nlet supportStatus;\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            } catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\n\nconst isArray = (value, details)=>{\n    if (!Array.isArray(value)) {\n        throw new SerwistError(\"not-an-array\", details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details.expectedMethod = expectedMethod;\n        throw new SerwistError(\"missing-a-method\", details);\n    }\n};\nconst isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details.expectedType = expectedType;\n        throw new SerwistError(\"incorrect-type\", details);\n    }\n};\nconst isInstance = (object, expectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details.expectedClassName = expectedClass.name;\n        throw new SerwistError(\"incorrect-class\", details);\n    }\n};\nconst isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details.validValueDescription = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new SerwistError(\"invalid-value\", details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details)=>{\n    const error = new SerwistError(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value){\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports =  false ? 0 : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass\n};\n\nconst logger =  false ? 0 : (()=>{\n    if (!(\"__WB_DISABLE_DEV_LOGS\" in globalThis)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: \"#7f8c8d\",\n        log: \"#2ecc71\",\n        warn: \"#f39c12\",\n        error: \"#c0392b\",\n        groupCollapsed: \"#3498db\",\n        groupEnd: null\n    };\n    const print = (method, args)=>{\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === \"groupCollapsed\") {\n            if (typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            \"border-radius: 0.5em\",\n            \"color: white\",\n            \"font-weight: bold\",\n            \"padding: 2px 0.5em\"\n        ];\n        const logPrefix = inGroup ? [] : [\n            \"%cserwist\",\n            styles.join(\";\")\n        ];\n        console[method](...logPrefix, ...args);\n        if (method === \"groupCollapsed\") {\n            inGroup = true;\n        }\n        if (method === \"groupEnd\") {\n            inGroup = false;\n        }\n    };\n    const loggerMethods = Object.keys(methodToColorMap);\n    return loggerMethods.reduce((api, method)=>{\n        api[method] = (...args)=>{\n            print(method, args);\n        };\n        return api;\n    }, {});\n})();\n\nconst quotaErrorCallbacks = new Set();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/core/dist/index.internal.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@serwist/core/dist/index.internal.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: function() { return /* binding */ Deferred; },\n/* harmony export */   SerwistError: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S; },\n/* harmony export */   assert: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f; },\n/* harmony export */   cacheMatchIgnoreParams: function() { return /* binding */ cacheMatchIgnoreParams; },\n/* harmony export */   canConstructReadableStream: function() { return /* binding */ canConstructReadableStream; },\n/* harmony export */   canConstructResponseFromBodyStream: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   dontWaitFor: function() { return /* binding */ dontWaitFor; },\n/* harmony export */   executeQuotaErrorCallbacks: function() { return /* binding */ executeQuotaErrorCallbacks; },\n/* harmony export */   getFriendlyURL: function() { return /* binding */ getFriendlyURL; },\n/* harmony export */   logger: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l; },\n/* harmony export */   privateCacheNames: function() { return /* reexport safe */ _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c; },\n/* harmony export */   resultingClientExists: function() { return /* binding */ resultingClientExists; },\n/* harmony export */   timeout: function() { return /* binding */ timeout; },\n/* harmony export */   waitUntil: function() { return /* binding */ waitUntil; }\n/* harmony export */ });\n/* harmony import */ var _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/quotaErrorCallbacks.js */ \"../../node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\");\n\n\n\nclass Deferred {\n    promise;\n    resolve;\n    reject;\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams){\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    const keysOptions = {\n        ...matchOptions,\n        ignoreSearch: true\n    };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\n\nlet supportStatus;\nfunction canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        try {\n            new ReadableStream({\n                start () {}\n            });\n            supportStatus = true;\n        } catch (error) {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\n\nfunction dontWaitFor(promise) {\n    void promise.then(()=>{});\n}\n\nconst executeQuotaErrorCallbacks = async ()=>{\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(`About to run ${_chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q.size} callbacks to clean up caches.`);\n    }\n    for (const callback of _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q){\n        await callback();\n        if (true) {\n            _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(callback, \"is complete.\");\n        }\n    }\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Finished running callbacks.\");\n    }\n};\n\nconst getFriendlyURL = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\nfunction timeout(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\nconst MAX_RETRY_TIME = 2000;\nasync function resultingClientExists(resultingClientId) {\n    if (!resultingClientId) {\n        return;\n    }\n    let existingWindows = await self.clients.matchAll({\n        type: \"window\"\n    });\n    const existingWindowIds = new Set(existingWindows.map((w)=>w.id));\n    let resultingWindow = undefined;\n    const startTime = performance.now();\n    while(performance.now() - startTime < MAX_RETRY_TIME){\n        existingWindows = await self.clients.matchAll({\n            type: \"window\"\n        });\n        resultingWindow = existingWindows.find((w)=>{\n            if (resultingClientId) {\n                return w.id === resultingClientId;\n            }\n            return !existingWindowIds.has(w.id);\n        });\n        if (resultingWindow) {\n            break;\n        }\n        await timeout(100);\n    }\n    return resultingWindow;\n}\n\nconst waitUntil = (event, asyncFn)=>{\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5pbnRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Y7QUFDMEQ7O0FBRWxKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1Qjs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSw2REFBTSxxQkFBcUIsNkRBQW1CLE9BQU87QUFDN0Q7QUFDQSwyQkFBMkIsNkRBQW1CO0FBQzlDO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDZEQUFNO0FBQ2xCO0FBQ0E7QUFDQSxRQUFRLElBQXFDO0FBQzdDLFFBQVEsNkRBQU07QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5pbnRlcm5hbC5qcz85NzMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGwgYXMgbG9nZ2VyLCBxIGFzIHF1b3RhRXJyb3JDYWxsYmFja3MgfSBmcm9tICcuL2NodW5rcy9xdW90YUVycm9yQ2FsbGJhY2tzLmpzJztcbmV4cG9ydCB7IFMgYXMgU2Vyd2lzdEVycm9yLCBmIGFzIGFzc2VydCwgYSBhcyBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtLCBjIGFzIHByaXZhdGVDYWNoZU5hbWVzIH0gZnJvbSAnLi9jaHVua3MvcXVvdGFFcnJvckNhbGxiYWNrcy5qcyc7XG5cbmNsYXNzIERlZmVycmVkIHtcbiAgICBwcm9taXNlO1xuICAgIHJlc29sdmU7XG4gICAgcmVqZWN0O1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBQYXJhbXMoZnVsbFVSTCwgaWdub3JlUGFyYW1zKSB7XG4gICAgY29uc3Qgc3RyaXBwZWRVUkwgPSBuZXcgVVJMKGZ1bGxVUkwpO1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgaWdub3JlUGFyYW1zKXtcbiAgICAgICAgc3RyaXBwZWRVUkwuc2VhcmNoUGFyYW1zLmRlbGV0ZShwYXJhbSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpcHBlZFVSTC5ocmVmO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FjaGVNYXRjaElnbm9yZVBhcmFtcyhjYWNoZSwgcmVxdWVzdCwgaWdub3JlUGFyYW1zLCBtYXRjaE9wdGlvbnMpIHtcbiAgICBjb25zdCBzdHJpcHBlZFJlcXVlc3RVUkwgPSBzdHJpcFBhcmFtcyhyZXF1ZXN0LnVybCwgaWdub3JlUGFyYW1zKTtcbiAgICBpZiAocmVxdWVzdC51cmwgPT09IHN0cmlwcGVkUmVxdWVzdFVSTCkge1xuICAgICAgICByZXR1cm4gY2FjaGUubWF0Y2gocmVxdWVzdCwgbWF0Y2hPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3Qga2V5c09wdGlvbnMgPSB7XG4gICAgICAgIC4uLm1hdGNoT3B0aW9ucyxcbiAgICAgICAgaWdub3JlU2VhcmNoOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBjYWNoZUtleXMgPSBhd2FpdCBjYWNoZS5rZXlzKHJlcXVlc3QsIGtleXNPcHRpb25zKTtcbiAgICBmb3IgKGNvbnN0IGNhY2hlS2V5IG9mIGNhY2hlS2V5cyl7XG4gICAgICAgIGNvbnN0IHN0cmlwcGVkQ2FjaGVLZXlVUkwgPSBzdHJpcFBhcmFtcyhjYWNoZUtleS51cmwsIGlnbm9yZVBhcmFtcyk7XG4gICAgICAgIGlmIChzdHJpcHBlZFJlcXVlc3RVUkwgPT09IHN0cmlwcGVkQ2FjaGVLZXlVUkwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5tYXRjaChjYWNoZUtleSwgbWF0Y2hPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG59XG5cbmxldCBzdXBwb3J0U3RhdHVzO1xuZnVuY3Rpb24gY2FuQ29uc3RydWN0UmVhZGFibGVTdHJlYW0oKSB7XG4gICAgaWYgKHN1cHBvcnRTdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgICAgICBzdGFydCAoKSB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdXBwb3J0U3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHN1cHBvcnRTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydFN0YXR1cztcbn1cblxuZnVuY3Rpb24gZG9udFdhaXRGb3IocHJvbWlzZSkge1xuICAgIHZvaWQgcHJvbWlzZS50aGVuKCgpPT57fSk7XG59XG5cbmNvbnN0IGV4ZWN1dGVRdW90YUVycm9yQ2FsbGJhY2tzID0gYXN5bmMgKCk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlci5sb2coYEFib3V0IHRvIHJ1biAke3F1b3RhRXJyb3JDYWxsYmFja3Muc2l6ZX0gY2FsbGJhY2tzIHRvIGNsZWFuIHVwIGNhY2hlcy5gKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBxdW90YUVycm9yQ2FsbGJhY2tzKXtcbiAgICAgICAgYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhjYWxsYmFjaywgXCJpcyBjb21wbGV0ZS5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBsb2dnZXIubG9nKFwiRmluaXNoZWQgcnVubmluZyBjYWxsYmFja3MuXCIpO1xuICAgIH1cbn07XG5cbmNvbnN0IGdldEZyaWVuZGx5VVJMID0gKHVybCk9PntcbiAgICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKFN0cmluZyh1cmwpLCBsb2NhdGlvbi5ocmVmKTtcbiAgICByZXR1cm4gdXJsT2JqLmhyZWYucmVwbGFjZShuZXcgUmVnRXhwKGBeJHtsb2NhdGlvbi5vcmlnaW59YCksIFwiXCIpO1xufTtcblxuZnVuY3Rpb24gdGltZW91dChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuY29uc3QgTUFYX1JFVFJZX1RJTUUgPSAyMDAwO1xuYXN5bmMgZnVuY3Rpb24gcmVzdWx0aW5nQ2xpZW50RXhpc3RzKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgaWYgKCFyZXN1bHRpbmdDbGllbnRJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBleGlzdGluZ1dpbmRvd3MgPSBhd2FpdCBzZWxmLmNsaWVudHMubWF0Y2hBbGwoe1xuICAgICAgICB0eXBlOiBcIndpbmRvd1wiXG4gICAgfSk7XG4gICAgY29uc3QgZXhpc3RpbmdXaW5kb3dJZHMgPSBuZXcgU2V0KGV4aXN0aW5nV2luZG93cy5tYXAoKHcpPT53LmlkKSk7XG4gICAgbGV0IHJlc3VsdGluZ1dpbmRvdyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB3aGlsZShwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZSA8IE1BWF9SRVRSWV9USU1FKXtcbiAgICAgICAgZXhpc3RpbmdXaW5kb3dzID0gYXdhaXQgc2VsZi5jbGllbnRzLm1hdGNoQWxsKHtcbiAgICAgICAgICAgIHR5cGU6IFwid2luZG93XCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdGluZ1dpbmRvdyA9IGV4aXN0aW5nV2luZG93cy5maW5kKCh3KT0+e1xuICAgICAgICAgICAgaWYgKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuaWQgPT09IHJlc3VsdGluZ0NsaWVudElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICFleGlzdGluZ1dpbmRvd0lkcy5oYXMody5pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0aW5nV2luZG93KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aW1lb3V0KDEwMCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRpbmdXaW5kb3c7XG59XG5cbmNvbnN0IHdhaXRVbnRpbCA9IChldmVudCwgYXN5bmNGbik9PntcbiAgICBjb25zdCByZXR1cm5Qcm9taXNlID0gYXN5bmNGbigpO1xuICAgIGV2ZW50LndhaXRVbnRpbChyZXR1cm5Qcm9taXNlKTtcbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbn07XG5cbmV4cG9ydCB7IERlZmVycmVkLCBjYWNoZU1hdGNoSWdub3JlUGFyYW1zLCBjYW5Db25zdHJ1Y3RSZWFkYWJsZVN0cmVhbSwgZG9udFdhaXRGb3IsIGV4ZWN1dGVRdW90YUVycm9yQ2FsbGJhY2tzLCBnZXRGcmllbmRseVVSTCwgbG9nZ2VyLCByZXN1bHRpbmdDbGllbnRFeGlzdHMsIHRpbWVvdXQsIHdhaXRVbnRpbCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/core/dist/index.internal.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/core/dist/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@serwist/core/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheNames: function() { return /* binding */ cacheNames; },\n/* harmony export */   clientsClaim: function() { return /* binding */ clientsClaim; },\n/* harmony export */   copyResponse: function() { return /* binding */ copyResponse; },\n/* harmony export */   registerQuotaErrorCallback: function() { return /* binding */ registerQuotaErrorCallback; },\n/* harmony export */   setCacheNameDetails: function() { return /* binding */ setCacheNameDetails; }\n/* harmony export */ });\n/* harmony import */ var _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/quotaErrorCallbacks.js */ \"../../node_modules/@serwist/core/dist/chunks/quotaErrorCallbacks.js\");\n\n\nconst cacheNames = {\n    get googleAnalytics () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getGoogleAnalyticsName();\n    },\n    get precache () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrecacheName();\n    },\n    get prefix () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getPrefix();\n    },\n    get runtime () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getRuntimeName();\n    },\n    get suffix () {\n        return _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.getSuffix();\n    }\n};\n\nconst clientsClaim = ()=>{\n    self.addEventListener(\"activate\", ()=>self.clients.claim());\n};\n\nconst copyResponse = async (response, modifier)=>{\n    let origin = null;\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"cross-origin-copy-response\", {\n            origin\n        });\n    }\n    const clonedResponse = response.clone();\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText\n    };\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    const body = (0,_chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.a)() ? clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n};\n\nconst registerQuotaErrorCallback = (callback)=>{\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(callback, \"function\", {\n            moduleName: \"@serwist/core\",\n            funcName: \"register\",\n            paramName: \"callback\"\n        });\n    }\n    _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.q.add(callback);\n    if (true) {\n        _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.l.log(\"Registered a callback to respond to quota errors.\", callback);\n    }\n};\n\nconst setCacheNameDetails = (details)=>{\n    if (true) {\n        for (const key of Object.keys(details)){\n            _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.f.isType(details[key], \"string\", {\n                moduleName: \"@serwist/core\",\n                funcName: \"setCacheNameDetails\",\n                paramName: `details.${key}`\n            });\n        }\n        if (details.precache?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"precache\",\n                value: details.precache\n            });\n        }\n        if (details.runtime?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"runtime\",\n                value: details.runtime\n            });\n        }\n        if (details.googleAnalytics?.length === 0) {\n            throw new _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.S(\"invalid-cache-name\", {\n                cacheNameId: \"googleAnalytics\",\n                value: details.googleAnalytics\n            });\n        }\n    }\n    _chunks_quotaErrorCallbacks_js__WEBPACK_IMPORTED_MODULE_0__.c.updateDetails(details);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ007O0FBRWhNO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCLEtBQUs7QUFDTDtBQUNBLGVBQWUsNkRBQVk7QUFDM0IsS0FBSztBQUNMO0FBQ0EsZUFBZSw2REFBWTtBQUMzQixLQUFLO0FBQ0w7QUFDQSxlQUFlLDZEQUFZO0FBQzNCLEtBQUs7QUFDTDtBQUNBLGVBQWUsNkRBQVk7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkRBQVk7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpRUFBa0M7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSw2REFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsSUFBSSw2REFBbUI7QUFDdkIsUUFBUSxJQUFxQztBQUM3QyxRQUFRLDZEQUFNO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0M7QUFDQSxZQUFZLDZEQUFrQjtBQUM5QjtBQUNBO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxzQkFBc0IsNkRBQVk7QUFDbEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esc0JBQXNCLDZEQUFZO0FBQ2xDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHNCQUFzQiw2REFBWTtBQUNsQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxJQUFJLDZEQUFZO0FBQ2hCOztBQUVtRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L2NvcmUvZGlzdC9pbmRleC5qcz8yZmU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgYXMgY2FjaGVOYW1lcyQxLCBTIGFzIFNlcndpc3RFcnJvciwgYSBhcyBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtLCBmIGFzIGZpbmFsQXNzZXJ0RXhwb3J0cywgcSBhcyBxdW90YUVycm9yQ2FsbGJhY2tzLCBsIGFzIGxvZ2dlciB9IGZyb20gJy4vY2h1bmtzL3F1b3RhRXJyb3JDYWxsYmFja3MuanMnO1xuXG5jb25zdCBjYWNoZU5hbWVzID0ge1xuICAgIGdldCBnb29nbGVBbmFseXRpY3MgKCkge1xuICAgICAgICByZXR1cm4gY2FjaGVOYW1lcyQxLmdldEdvb2dsZUFuYWx5dGljc05hbWUoKTtcbiAgICB9LFxuICAgIGdldCBwcmVjYWNoZSAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0UHJlY2FjaGVOYW1lKCk7XG4gICAgfSxcbiAgICBnZXQgcHJlZml4ICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRQcmVmaXgoKTtcbiAgICB9LFxuICAgIGdldCBydW50aW1lICgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlTmFtZXMkMS5nZXRSdW50aW1lTmFtZSgpO1xuICAgIH0sXG4gICAgZ2V0IHN1ZmZpeCAoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWVzJDEuZ2V0U3VmZml4KCk7XG4gICAgfVxufTtcblxuY29uc3QgY2xpZW50c0NsYWltID0gKCk9PntcbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJhY3RpdmF0ZVwiLCAoKT0+c2VsZi5jbGllbnRzLmNsYWltKCkpO1xufTtcblxuY29uc3QgY29weVJlc3BvbnNlID0gYXN5bmMgKHJlc3BvbnNlLCBtb2RpZmllcik9PntcbiAgICBsZXQgb3JpZ2luID0gbnVsbDtcbiAgICBpZiAocmVzcG9uc2UudXJsKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVVJMID0gbmV3IFVSTChyZXNwb25zZS51cmwpO1xuICAgICAgICBvcmlnaW4gPSByZXNwb25zZVVSTC5vcmlnaW47XG4gICAgfVxuICAgIGlmIChvcmlnaW4gIT09IHNlbGYubG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJjcm9zcy1vcmlnaW4tY29weS1yZXNwb25zZVwiLCB7XG4gICAgICAgICAgICBvcmlnaW5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNsb25lZFJlc3BvbnNlID0gcmVzcG9uc2UuY2xvbmUoKTtcbiAgICBjb25zdCByZXNwb25zZUluaXQgPSB7XG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKGNsb25lZFJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IGNsb25lZFJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogY2xvbmVkUmVzcG9uc2Uuc3RhdHVzVGV4dFxuICAgIH07XG4gICAgY29uc3QgbW9kaWZpZWRSZXNwb25zZUluaXQgPSBtb2RpZmllciA/IG1vZGlmaWVyKHJlc3BvbnNlSW5pdCkgOiByZXNwb25zZUluaXQ7XG4gICAgY29uc3QgYm9keSA9IGNhbkNvbnN0cnVjdFJlc3BvbnNlRnJvbUJvZHlTdHJlYW0oKSA/IGNsb25lZFJlc3BvbnNlLmJvZHkgOiBhd2FpdCBjbG9uZWRSZXNwb25zZS5ibG9iKCk7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCBtb2RpZmllZFJlc3BvbnNlSW5pdCk7XG59O1xuXG5jb25zdCByZWdpc3RlclF1b3RhRXJyb3JDYWxsYmFjayA9IChjYWxsYmFjayk9PntcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGZpbmFsQXNzZXJ0RXhwb3J0cy5pc1R5cGUoY2FsbGJhY2ssIFwiZnVuY3Rpb25cIiwge1xuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9jb3JlXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJyZWdpc3RlclwiLFxuICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNhbGxiYWNrXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHF1b3RhRXJyb3JDYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJSZWdpc3RlcmVkIGEgY2FsbGJhY2sgdG8gcmVzcG9uZCB0byBxdW90YSBlcnJvcnMuXCIsIGNhbGxiYWNrKTtcbiAgICB9XG59O1xuXG5jb25zdCBzZXRDYWNoZU5hbWVEZXRhaWxzID0gKGRldGFpbHMpPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkZXRhaWxzKSl7XG4gICAgICAgICAgICBmaW5hbEFzc2VydEV4cG9ydHMuaXNUeXBlKGRldGFpbHNba2V5XSwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY29yZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcInNldENhY2hlTmFtZURldGFpbHNcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IGBkZXRhaWxzLiR7a2V5fWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLnByZWNhY2hlPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJpbnZhbGlkLWNhY2hlLW5hbWVcIiwge1xuICAgICAgICAgICAgICAgIGNhY2hlTmFtZUlkOiBcInByZWNhY2hlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRldGFpbHMucHJlY2FjaGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLnJ1bnRpbWU/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImludmFsaWQtY2FjaGUtbmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgY2FjaGVOYW1lSWQ6IFwicnVudGltZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBkZXRhaWxzLnJ1bnRpbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXRhaWxzLmdvb2dsZUFuYWx5dGljcz8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwiaW52YWxpZC1jYWNoZS1uYW1lXCIsIHtcbiAgICAgICAgICAgICAgICBjYWNoZU5hbWVJZDogXCJnb29nbGVBbmFseXRpY3NcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGV0YWlscy5nb29nbGVBbmFseXRpY3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhY2hlTmFtZXMkMS51cGRhdGVEZXRhaWxzKGRldGFpbHMpO1xufTtcblxuZXhwb3J0IHsgY2FjaGVOYW1lcywgY2xpZW50c0NsYWltLCBjb3B5UmVzcG9uc2UsIHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrLCBzZXRDYWNoZU5hbWVEZXRhaWxzIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/core/dist/index.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/next/dist/index.worker.js":
/*!*************************************************************!*\
  !*** ../../node_modules/@serwist/next/dist/index.worker.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PAGES_CACHE_NAME: function() { return /* binding */ PAGES_CACHE_NAME; },\n/* harmony export */   defaultCache: function() { return /* binding */ defaultCache; }\n/* harmony export */ });\n/* harmony import */ var _serwist_sw_plugins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/sw/plugins */ \"../../node_modules/@serwist/sw/dist/index.plugins.js\");\n/* harmony import */ var _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/sw/strategies */ \"../../node_modules/@serwist/sw/dist/index.strategies.js\");\n\n\n\nconst PAGES_CACHE_NAME = {\n    rscPrefetch: \"pages-rsc-prefetch\",\n    rsc: \"pages-rsc\",\n    html: \"pages\"\n};\n\nconst defaultCache =  true ? [] : 0;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/next/dist/index.worker.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/routing/dist/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/@serwist/routing/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigationRoute: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.NavigationRoute; },\n/* harmony export */   RegExpRoute: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.RegExpRoute; },\n/* harmony export */   Route: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.Route; },\n/* harmony export */   Router: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.Router; },\n/* harmony export */   registerRoute: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.registerRoute; },\n/* harmony export */   setCatchHandler: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.setCatchHandler; },\n/* harmony export */   setDefaultHandler: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.setDefaultHandler; },\n/* harmony export */   unregisterRoute: function() { return /* reexport safe */ _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__.unregisterRoute; }\n/* harmony export */ });\n/* harmony import */ var _serwist_sw_routing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/sw/routing */ \"../../node_modules/@serwist/sw/dist/index.routing.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3JvdXRpbmcvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBc0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC9yb3V0aW5nL2Rpc3QvaW5kZXguanM/NTFmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBOYXZpZ2F0aW9uUm91dGUsIFJlZ0V4cFJvdXRlLCBSb3V0ZSwgUm91dGVyLCByZWdpc3RlclJvdXRlLCBzZXRDYXRjaEhhbmRsZXIsIHNldERlZmF1bHRIYW5kbGVyLCB1bnJlZ2lzdGVyUm91dGUgfSBmcm9tICdAc2Vyd2lzdC9zdy9yb3V0aW5nJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/routing/dist/index.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/strategies/dist/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/@serwist/strategies/dist/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheFirst: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.CacheFirst; },\n/* harmony export */   CacheOnly: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.CacheOnly; },\n/* harmony export */   NetworkFirst: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.NetworkFirst; },\n/* harmony export */   NetworkOnly: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.NetworkOnly; },\n/* harmony export */   StaleWhileRevalidate: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.StaleWhileRevalidate; },\n/* harmony export */   Strategy: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.Strategy; },\n/* harmony export */   StrategyHandler: function() { return /* reexport safe */ _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__.StrategyHandler; }\n/* harmony export */ });\n/* harmony import */ var _serwist_sw_strategies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/sw/strategies */ \"../../node_modules/@serwist/sw/dist/index.strategies.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N0cmF0ZWdpZXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUEySSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N0cmF0ZWdpZXMvZGlzdC9pbmRleC5qcz82ZjIzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IENhY2hlRmlyc3QsIENhY2hlT25seSwgTmV0d29ya0ZpcnN0LCBOZXR3b3JrT25seSwgU3RhbGVXaGlsZVJldmFsaWRhdGUsIFN0cmF0ZWd5LCBTdHJhdGVneUhhbmRsZXIgfSBmcm9tICdAc2Vyd2lzdC9zdy9zdHJhdGVnaWVzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/strategies/dist/index.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/NavigationRoute.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/NavigationRoute.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: function() { return /* binding */ NavigationRoute; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n\n\n\nclass NavigationRoute extends _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R {\n    _allowlist;\n    _denylist;\n    constructor(handler, { allowlist = [\n        /./\n    ], denylist = [] } = {}){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.allowlist\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"NavigationRoute\",\n                funcName: \"constructor\",\n                paramName: \"options.denylist\"\n            });\n        }\n        super((options)=>this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    _match({ url, request }) {\n        if (request && request.mode !== \"navigate\") {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist){\n            if (regExp.test(pathnameAndSearch)) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL matches this denylist pattern: ${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp)=>regExp.test(pathnameAndSearch))) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The navigation route ${pathnameAndSearch} is being used.`);\n            }\n            return true;\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL being navigated to doesn't match the allowlist.`);\n        }\n        return false;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvY2h1bmtzL05hdmlnYXRpb25Sb3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDTjs7QUFFbEQsOEJBQThCLGtEQUFLO0FBQ25DO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQixZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFxQztBQUN6RCxvQkFBb0IsMERBQU0sNkJBQTZCLG1CQUFtQixrRUFBa0Usa0JBQWtCO0FBQzlKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsSUFBcUM7QUFDckQsZ0JBQWdCLDBEQUFNLCtCQUErQixtQkFBbUI7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNLDZCQUE2QixtQkFBbUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvQHNlcndpc3Qvc3cvZGlzdC9jaHVua3MvTmF2aWdhdGlvblJvdXRlLmpzP2I0MDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0LCBsb2dnZXIgfSBmcm9tICdAc2Vyd2lzdC9jb3JlL2ludGVybmFsJztcbmltcG9ydCB7IFIgYXMgUm91dGUgfSBmcm9tICcuL3NpbmdsZXRvblJvdXRlci5qcyc7XG5cbmNsYXNzIE5hdmlnYXRpb25Sb3V0ZSBleHRlbmRzIFJvdXRlIHtcbiAgICBfYWxsb3dsaXN0O1xuICAgIF9kZW55bGlzdDtcbiAgICBjb25zdHJ1Y3RvcihoYW5kbGVyLCB7IGFsbG93bGlzdCA9IFtcbiAgICAgICAgLy4vXG4gICAgXSwgZGVueWxpc3QgPSBbXSB9ID0ge30pe1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBhc3NlcnQuaXNBcnJheU9mQ2xhc3MoYWxsb3dsaXN0LCBSZWdFeHAsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L3JvdXRpbmdcIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiTmF2aWdhdGlvblJvdXRlXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwib3B0aW9ucy5hbGxvd2xpc3RcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNBcnJheU9mQ2xhc3MoZGVueWxpc3QsIFJlZ0V4cCwge1xuICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3Qvcm91dGluZ1wiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJOYXZpZ2F0aW9uUm91dGVcIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJvcHRpb25zLmRlbnlsaXN0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKChvcHRpb25zKT0+dGhpcy5fbWF0Y2gob3B0aW9ucyksIGhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9hbGxvd2xpc3QgPSBhbGxvd2xpc3Q7XG4gICAgICAgIHRoaXMuX2RlbnlsaXN0ID0gZGVueWxpc3Q7XG4gICAgfVxuICAgIF9tYXRjaCh7IHVybCwgcmVxdWVzdCB9KSB7XG4gICAgICAgIGlmIChyZXF1ZXN0ICYmIHJlcXVlc3QubW9kZSAhPT0gXCJuYXZpZ2F0ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aG5hbWVBbmRTZWFyY2ggPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICBmb3IgKGNvbnN0IHJlZ0V4cCBvZiB0aGlzLl9kZW55bGlzdCl7XG4gICAgICAgICAgICBpZiAocmVnRXhwLnRlc3QocGF0aG5hbWVBbmRTZWFyY2gpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBUaGUgbmF2aWdhdGlvbiByb3V0ZSAke3BhdGhuYW1lQW5kU2VhcmNofSBpcyBub3QgYmVpbmcgdXNlZCwgc2luY2UgdGhlIFVSTCBtYXRjaGVzIHRoaXMgZGVueWxpc3QgcGF0dGVybjogJHtyZWdFeHAudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hbGxvd2xpc3Quc29tZSgocmVnRXhwKT0+cmVnRXhwLnRlc3QocGF0aG5hbWVBbmRTZWFyY2gpKSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgVGhlIG5hdmlnYXRpb24gcm91dGUgJHtwYXRobmFtZUFuZFNlYXJjaH0gaXMgYmVpbmcgdXNlZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coYFRoZSBuYXZpZ2F0aW9uIHJvdXRlICR7cGF0aG5hbWVBbmRTZWFyY2h9IGlzIG5vdCBiZWluZyB1c2VkLCBzaW5jZSB0aGUgVVJMIGJlaW5nIG5hdmlnYXRlZCB0byBkb2Vzbid0IG1hdGNoIHRoZSBhbGxvd2xpc3QuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvblJvdXRlIGFzIE4gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/NavigationRoute.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N: function() { return /* binding */ NetworkOnly; },\n/* harmony export */   a: function() { return /* binding */ NetworkFirst; },\n/* harmony export */   c: function() { return /* binding */ cacheOkAndOpaquePlugin; },\n/* harmony export */   m: function() { return /* binding */ messages; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _Strategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Strategy.js */ \"../../node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n\n\n\nconst cacheOkAndOpaquePlugin = {\n    cacheWillUpdate: async ({ response })=>{\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    }\n};\n\nconst messages = {\n    strategyStart: (strategyName, request)=>`Using ${strategyName} to respond to '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}'`,\n    printFinalResponse: (response)=>{\n        if (response) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View the final response here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(response || \"[No response returned]\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n    }\n};\n\nclass NetworkFirst extends _Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (true) {\n            if (this._networkTimeoutSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(this._networkTimeoutSeconds, \"number\", {\n                    moduleName: \"@serwist/strategies\",\n                    className: this.constructor.name,\n                    funcName: \"constructor\",\n                    paramName: \"networkTimeoutSeconds\"\n                });\n            }\n        }\n    }\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"makeRequest\"\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({\n                request,\n                logs,\n                handler\n            });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async ()=>{\n            return await handler.waitUntil(Promise.race(promises)) || await networkPromise;\n        })());\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            const onNetworkTimeout = async ()=>{\n                if (true) {\n                    logs.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId\n        };\n    }\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error = undefined;\n        let response = undefined;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (true) {\n            if (response) {\n                logs.push(\"Got response from network.\");\n            } else {\n                logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (true) {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n                } else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\n\nclass NetworkOnly extends _Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    _networkTimeoutSeconds;\n    constructor(options = {}){\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    async _handle(request, handler) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"_handle\",\n                paramName: \"request\"\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request)\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.timeout)(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`);\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Got response from network.\");\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Unable to get a response from the network.\");\n            }\n            messages.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: function() { return /* binding */ BackgroundSyncPlugin; },\n/* harmony export */   P: function() { return /* binding */ PrecacheFallbackPlugin; },\n/* harmony export */   Q: function() { return /* binding */ Queue; },\n/* harmony export */   S: function() { return /* binding */ StorableRequest; },\n/* harmony export */   a: function() { return /* binding */ QueueStore; },\n/* harmony export */   i: function() { return /* binding */ initialize; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NetworkOnly.js */ \"../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb */ \"../../node_modules/idb/build/index.js\");\n/* harmony import */ var _singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./singletonPrecacheController.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n\n\n\n\n\n\nconst DB_VERSION = 3;\nconst DB_NAME = \"serwist-background-sync\";\nconst REQUEST_OBJECT_STORE_NAME = \"requests\";\nconst QUEUE_NAME_INDEX = \"queueName\";\nclass QueueDb {\n    _db = null;\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor?.value.id;\n    }\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"next\");\n    }\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), \"prev\");\n    }\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.index(QUEUE_NAME_INDEX).openCursor(query, direction);\n        return cursor?.value;\n    }\n    async getDb() {\n        if (!this._db) {\n            this._db = await (0,idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb\n            });\n        }\n        return this._db;\n    }\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: \"id\"\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, {\n            unique: false\n        });\n    }\n}\n\nclass QueueStore {\n    _queueName;\n    _queueDb;\n    constructor(queueName){\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    async pushEntry(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"pushEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async unshiftEntry(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry.requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueueStore\",\n                funcName: \"unshiftEntry\",\n                paramName: \"entry.requestData\"\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            entry.id = firstId - 1;\n        } else {\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n\nconst serializableProperties = [\n    \"method\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"mode\",\n    \"credentials\",\n    \"cache\",\n    \"redirect\",\n    \"integrity\",\n    \"keepalive\"\n];\nclass StorableRequest {\n    _requestData;\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {}\n        };\n        if (request.method !== \"GET\") {\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        request.headers.forEach((value, key)=>{\n            requestData.headers[key] = value;\n        });\n        for (const prop of serializableProperties){\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    constructor(requestData){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(requestData, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(requestData.url, \"string\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"StorableRequest\",\n                funcName: \"constructor\",\n                paramName: \"requestData.url\"\n            });\n        }\n        if (requestData.mode === \"navigate\") {\n            requestData.mode = \"same-origin\";\n        }\n        this._requestData = requestData;\n    }\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\n\nconst TAG_PREFIX = \"serwist-background-sync\";\nconst MAX_RETENTION_TIME$1 = 60 * 24 * 7;\nconst queueNames = new Set();\nconst convertEntry = (queueStoreEntry)=>{\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\nclass Queue {\n    _name;\n    _onSync;\n    _maxRetentionTime;\n    _queueStore;\n    _forceSyncFallback;\n    _syncInProgress = false;\n    _requestsAddedDuringSync = false;\n    constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}){\n        if (queueNames.has(name)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"duplicate-queue-name\", {\n                name\n            });\n        }\n        queueNames.add(name);\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME$1;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    get name() {\n        return this._name;\n    }\n    async pushRequest(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"pushRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"push\");\n    }\n    async unshiftRequest(entry) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(entry, \"object\", {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(entry.request, Request, {\n                moduleName: \"@serwist/sw/plugins\",\n                className: \"BackgroundSyncQueue\",\n                funcName: \"unshiftRequest\",\n                paramName: \"entry.request\"\n            });\n        }\n        await this._addRequest(entry, \"unshift\");\n    }\n    async popRequest() {\n        return this._removeRequest(\"pop\");\n    }\n    async shiftRequest() {\n        return this._removeRequest(\"shift\");\n    }\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries){\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            } else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    async size() {\n        return await this._queueStore.size();\n    }\n    async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp\n        };\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch(operation){\n            case \"push\":\n                await this._queueStore.pushEntry(entry);\n                break;\n            case \"unshift\":\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' has ` + `been added to background sync queue '${this._name}'.`);\n        }\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        } else {\n            await this.registerSync();\n        }\n    }\n    async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch(operation){\n            case \"pop\":\n                entry = await this._queueStore.popEntry();\n                break;\n            case \"shift\":\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        return undefined;\n    }\n    async replayRequests() {\n        let entry = undefined;\n        while(entry = await this.shiftRequest()){\n            try {\n                await fetch(entry.request.clone());\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(entry.request.url)}' ` + `has been replayed in queue '${this._name}'`);\n                }\n            } catch (error) {\n                await this.unshiftRequest(entry);\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(entry.request.url)}' ` + `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"queue-replay-failed\", {\n                    name: this._name\n                });\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`);\n        }\n    }\n    async registerSync() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            } catch (err) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    _addSyncListener() {\n        if (\"sync\" in self.registration && !this._forceSyncFallback) {\n            self.addEventListener(\"sync\", (event)=>{\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Background sync for tag '${event.tag}' has been received`);\n                    }\n                    const syncComplete = async ()=>{\n                        this._syncInProgress = true;\n                        let syncError = undefined;\n                        try {\n                            await this._onSync({\n                                queue: this\n                            });\n                        } catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                throw syncError;\n                            }\n                        } finally{\n                            if (this._requestsAddedDuringSync && !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        } else {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Background sync replaying without background sync event\");\n            }\n            void this._onSync({\n                queue: this\n            });\n        }\n    }\n    static get _queueNames() {\n        return queueNames;\n    }\n}\n\nclass BackgroundSyncPlugin {\n    _queue;\n    constructor(name, options){\n        this._queue = new Queue(name, options);\n    }\n    async fetchDidFail({ request }) {\n        await this._queue.pushRequest({\n            request\n        });\n    }\n}\n\nconst QUEUE_NAME = \"serwist-google-analytics\";\nconst MAX_RETENTION_TIME = 60 * 48;\nconst GOOGLE_ANALYTICS_HOST = \"www.google-analytics.com\";\nconst GTM_HOST = \"www.googletagmanager.com\";\nconst ANALYTICS_JS_PATH = \"/analytics.js\";\nconst GTAG_JS_PATH = \"/gtag/js\";\nconst GTM_JS_PATH = \"/gtm.js\";\nconst COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n\nconst createOnSyncCallback = (config)=>{\n    return async ({ queue })=>{\n        let entry = undefined;\n        while(entry = await queue.shiftRequest()){\n            const { request, timestamp } = entry;\n            const url = new URL(request.url);\n            try {\n                const params = request.method === \"POST\" ? new URLSearchParams(await request.clone().text()) : url.searchParams;\n                const originalHitTime = timestamp - (Number(params.get(\"qt\")) || 0);\n                const queueTime = Date.now() - originalHitTime;\n                params.set(\"qt\", String(queueTime));\n                if (config.parameterOverrides) {\n                    for (const param of Object.keys(config.parameterOverrides)){\n                        const value = config.parameterOverrides[param];\n                        params.set(param, value);\n                    }\n                }\n                if (typeof config.hitFilter === \"function\") {\n                    config.hitFilter.call(null, params);\n                }\n                await fetch(new Request(url.origin + url.pathname, {\n                    body: params.toString(),\n                    method: \"POST\",\n                    mode: \"cors\",\n                    credentials: \"omit\",\n                    headers: {\n                        \"Content-Type\": \"text/plain\"\n                    }\n                }));\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url.href)}' has been replayed`);\n                }\n            } catch (err) {\n                await queue.unshiftRequest(entry);\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url.href)}' failed to replay, putting it back in the queue.`);\n                }\n                throw err;\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"All Google Analytics request successfully replayed; \" + \"the queue is now empty!\");\n        }\n    };\n};\nconst createCollectRoutes = (bgSyncPlugin)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && COLLECT_PATHS_REGEX.test(url.pathname);\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.N({\n        plugins: [\n            bgSyncPlugin\n        ]\n    });\n    return [\n        new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\"),\n        new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"POST\")\n    ];\n};\nconst createAnalyticsJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GOOGLE_ANALYTICS_HOST && url.pathname === ANALYTICS_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst createGtagJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTAG_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst createGtmJsRoute = (cacheName)=>{\n    const match = ({ url })=>url.hostname === GTM_HOST && url.pathname === GTM_JS_PATH;\n    const handler = new _NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheName\n    });\n    return new _singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R(match, handler, \"GET\");\n};\nconst initialize = ({ cacheName, router = (0,_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g)(), ...options } = {})=>{\n    const resolvedCacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getGoogleAnalyticsName(cacheName);\n    const bgSyncPlugin = new BackgroundSyncPlugin(QUEUE_NAME, {\n        maxRetentionTime: MAX_RETENTION_TIME,\n        onSync: createOnSyncCallback(options)\n    });\n    const routes = [\n        createGtmJsRoute(resolvedCacheName),\n        createAnalyticsJsRoute(resolvedCacheName),\n        createGtagJsRoute(resolvedCacheName),\n        ...createCollectRoutes(bgSyncPlugin)\n    ];\n    for (const route of routes){\n        router.registerRoute(route);\n    }\n};\n\nclass PrecacheFallbackPlugin {\n    _fallbackUrls;\n    _precacheController;\n    constructor({ fallbackUrls, precacheController }){\n        this._fallbackUrls = fallbackUrls;\n        this._precacheController = precacheController || (0,_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_4__.g)();\n    }\n    async handlerDidError(param) {\n        for (const fallback of this._fallbackUrls){\n            if (typeof fallback === \"string\") {\n                const fallbackResponse = await this._precacheController.matchPrecache(fallback);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            } else if (fallback.matcher(param)) {\n                const fallbackResponse = await this._precacheController.matchPrecache(fallback.url);\n                if (fallbackResponse !== undefined) {\n                    return fallbackResponse;\n                }\n            }\n        }\n        return undefined;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/Strategy.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/Strategy.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ Strategy; },\n/* harmony export */   a: function() { return /* binding */ StrategyHandler; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n\n\nfunction toRequest(input) {\n    return typeof input === \"string\" ? new Request(input) : input;\n}\nclass StrategyHandler {\n    event;\n    request;\n    url;\n    params;\n    _cacheKeys = {};\n    _strategy;\n    _handlerDeferred;\n    _extendLifetimePromises;\n    _plugins;\n    _pluginStateMap;\n    constructor(strategy, options){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: \"@serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.event\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(options.request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: \"StrategyHandler\",\n                funcName: \"constructor\",\n                paramName: \"options.request\"\n            });\n        }\n        this.event = options.event;\n        this.request = options.request;\n        if (options.url) {\n            this.url = options.url;\n            this.params = options.params;\n        }\n        this._strategy = strategy;\n        this._handlerDeferred = new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this._extendLifetimePromises = [];\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins){\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === \"navigate\" && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Using a preloaded navigation response for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        const originalRequest = this.hasCallback(\"fetchDidFail\") ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks(\"requestWillFetch\")){\n                request = await cb({\n                    request: request.clone(),\n                    event\n                });\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"plugin-error-request-will-fetch\", {\n                    thrownErrorMessage: err.message\n                });\n            }\n        }\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            fetchResponse = await fetch(request, request.mode === \"navigate\" ? undefined : this._strategy.fetchOptions);\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Network request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' returned a response with status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks(\"fetchDidSucceed\")){\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse\n                });\n            }\n            return fetchResponse;\n        } catch (error) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Network request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}' threw an error.`, error);\n            }\n            if (originalRequest) {\n                await this.runCallbacks(\"fetchDidFail\", {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone()\n                });\n            }\n            throw error;\n        }\n    }\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, \"read\");\n        const multiMatchOptions = {\n            ...matchOptions,\n            ...{\n                cacheName\n            }\n        };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (true) {\n            if (cachedResponse) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Found a cached response in '${cacheName}'.`);\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cachedResponseWillBeUsed\")){\n            cachedResponse = await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event\n            }) || undefined;\n        }\n        return cachedResponse;\n    }\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.timeout)(0);\n        const effectiveRequest = await this.getCacheKey(request, \"write\");\n        if (true) {\n            if (effectiveRequest.method && effectiveRequest.method !== \"GET\") {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"attempt-to-cache-non-get-request\", {\n                    url: (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url),\n                    method: effectiveRequest.method\n                });\n            }\n        }\n        if (!response) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Cannot cache non-existent response for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}'.`);\n            }\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"cache-put-with-no-response\", {\n                url: (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Response '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}' will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        if (true) {\n            const vary = response.headers.get(\"Vary\");\n            if (vary && matchOptions?.ignoreVary !== true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)} has a 'Vary: ${vary}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        const hasCacheUpdateCallback = this.hasCallback(\"cacheDidUpdate\");\n        const oldResponse = hasCacheUpdateCallback ? await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.cacheMatchIgnoreParams)(cache, effectiveRequest.clone(), [\n            \"__WB_REVISION__\"\n        ], matchOptions) : null;\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Updating the '${cacheName}' cache with a new Response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                if (error.name === \"QuotaExceededError\") {\n                    await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.executeQuotaErrorCallbacks)();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks(\"cacheDidUpdate\")){\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event\n            });\n        }\n        return true;\n    }\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks(\"cacheKeyWillBeUsed\")){\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    params: this.params\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)){\n            await callback(param);\n        }\n    }\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins){\n            if (typeof plugin[name] === \"function\") {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param)=>{\n                    const statefulParam = {\n                        ...param,\n                        state\n                    };\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    async doneWaiting() {\n        let promise = undefined;\n        while(promise = this._extendLifetimePromises.shift()){\n            await promise;\n        }\n    }\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks(\"cacheWillUpdate\")){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (true) {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`);\n                        } else {\n                            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The response for '${this.request.url}' returned a status code of '${response.status}' and won't be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\n\nclass Strategy {\n    cacheName;\n    plugins;\n    fetchOptions;\n    matchOptions;\n    constructor(options = {}){\n        this.cacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getRuntimeName(options.cacheName);\n        this.plugins = options.plugins || [];\n        this.fetchOptions = options.fetchOptions;\n        this.matchOptions = options.matchOptions;\n    }\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    handleAll(options) {\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === \"string\" ? new Request(options.request) : options.request;\n        const handler = new StrategyHandler(this, options.url ? {\n            event,\n            request,\n            url: options.url,\n            params: options.params\n        } : {\n            event,\n            request\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks(\"handlerWillStart\", {\n            event,\n            request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            if (response === undefined || response.type === \"error\") {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                    url: request.url\n                });\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks(\"handlerDidError\")){\n                    response = await callback({\n                        error,\n                        event,\n                        request\n                    });\n                    if (response !== undefined) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            if (true) {\n                throw _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`While responding to '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}', an ${error instanceof Error ? error.toString() : \"\"} error occurred. Using a fallback response provided by a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks(\"handlerWillRespond\")){\n            response = await callback({\n                event,\n                request,\n                response\n            });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response = undefined;\n        let error = undefined;\n        try {\n            response = await responseDone;\n        } catch (error) {}\n        try {\n            await handler.runCallbacks(\"handlerDidRespond\", {\n                event,\n                request,\n                response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks(\"handlerDidComplete\", {\n            event,\n            request,\n            response,\n            error\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/Strategy.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/precacheAndRoute.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/precacheAndRoute.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: function() { return /* binding */ PrecacheRoute; },\n/* harmony export */   a: function() { return /* binding */ createHandlerBoundToURL; },\n/* harmony export */   b: function() { return /* binding */ addRoute; },\n/* harmony export */   c: function() { return /* binding */ cleanupOutdatedCaches; },\n/* harmony export */   d: function() { return /* binding */ precache; },\n/* harmony export */   p: function() { return /* binding */ precacheAndRoute; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singletonPrecacheController.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n/* harmony import */ var _registerRoute_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./registerRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/registerRoute.js\");\n/* harmony import */ var _singletonRouter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n\n\n\n\n\nfunction removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    for (const paramName of [\n        ...urlObject.searchParams.keys()\n    ]){\n        if (ignoreURLParametersMatching.some((regExp)=>regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n\nfunction* generateURLVariations(url, { ignoreURLParametersMatching = [\n    /^utm_/,\n    /^fbclid$/\n], directoryIndex = \"index.html\", cleanURLs = true, urlManipulation } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = \"\";\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith(\"/\")) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += \".html\";\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({\n            url: urlObject\n        });\n        for (const urlToAttempt of additionalURLs){\n            yield urlToAttempt.href;\n        }\n    }\n}\n\nclass PrecacheRoute extends _singletonRouter_js__WEBPACK_IMPORTED_MODULE_3__.R {\n    constructor(precacheController, options){\n        const match = ({ request })=>{\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)){\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return {\n                        cacheKey,\n                        integrity\n                    };\n                }\n            }\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Precaching did not find a match for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}`);\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\n\nconst SUBSTRING_TO_FIND = \"-precache-\";\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND)=>{\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName)=>{\n        return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName)=>self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\n\nconst cleanupOutdatedCaches = ()=>{\n    self.addEventListener(\"activate\", (event)=>{\n        const cacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted)=>{\n            if (true) {\n                if (cachesDeleted.length > 0) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"The following out-of-date precaches were cleaned up automatically:\", cachesDeleted);\n                }\n            }\n        }));\n    });\n};\n\nconst createHandlerBoundToURL = (url)=>{\n    const precacheController = (0,_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_1__.g)();\n    return precacheController.createHandlerBoundToURL(url);\n};\n\nconst addRoute = (options)=>{\n    const precacheController = (0,_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_1__.g)();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    (0,_registerRoute_js__WEBPACK_IMPORTED_MODULE_2__.r)(precacheRoute);\n};\n\nconst precache = (entries)=>{\n    const precacheController = (0,_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_1__.g)();\n    precacheController.precache(entries);\n};\n\nconst precacheAndRoute = (entries, options)=>{\n    precache(entries);\n    addRoute(options);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvY2h1bmtzL3ByZWNhY2hlQW5kUm91dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFtRjtBQUNJO0FBQy9CO0FBQ047O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0Esc0VBQXNFLElBQUk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLGtEQUFLO0FBQ2pDO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixJQUFxQztBQUNyRCxnQkFBZ0IsMERBQU0sOENBQThDLHNFQUFjLGNBQWM7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIscUVBQWlCO0FBQzNDO0FBQ0EsZ0JBQWdCLElBQXFDO0FBQ3JEO0FBQ0Esb0JBQW9CLDBEQUFNO0FBQzFCO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMOztBQUVBO0FBQ0EsK0JBQStCLGtFQUE4QjtBQUM3RDtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLGtFQUE4QjtBQUM3RDtBQUNBLElBQUksb0RBQWE7QUFDakI7O0FBRUE7QUFDQSwrQkFBK0Isa0VBQThCO0FBQzdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRTZJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvQHNlcndpc3Qvc3cvZGlzdC9jaHVua3MvcHJlY2FjaGVBbmRSb3V0ZS5qcz9kN2QyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciwgZ2V0RnJpZW5kbHlVUkwsIHByaXZhdGVDYWNoZU5hbWVzIH0gZnJvbSAnQHNlcndpc3QvY29yZS9pbnRlcm5hbCc7XG5pbXBvcnQgeyBnIGFzIGdldFNpbmdsZXRvblByZWNhY2hlQ29udHJvbGxlciB9IGZyb20gJy4vc2luZ2xldG9uUHJlY2FjaGVDb250cm9sbGVyLmpzJztcbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJSb3V0ZSB9IGZyb20gJy4vcmVnaXN0ZXJSb3V0ZS5qcyc7XG5pbXBvcnQgeyBSIGFzIFJvdXRlIH0gZnJvbSAnLi9zaW5nbGV0b25Sb3V0ZXIuanMnO1xuXG5mdW5jdGlvbiByZW1vdmVJZ25vcmVkU2VhcmNoUGFyYW1zKHVybE9iamVjdCwgaWdub3JlVVJMUGFyYW1ldGVyc01hdGNoaW5nID0gW10pIHtcbiAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBvZiBbXG4gICAgICAgIC4uLnVybE9iamVjdC5zZWFyY2hQYXJhbXMua2V5cygpXG4gICAgXSl7XG4gICAgICAgIGlmIChpZ25vcmVVUkxQYXJhbWV0ZXJzTWF0Y2hpbmcuc29tZSgocmVnRXhwKT0+cmVnRXhwLnRlc3QocGFyYW1OYW1lKSkpIHtcbiAgICAgICAgICAgIHVybE9iamVjdC5zZWFyY2hQYXJhbXMuZGVsZXRlKHBhcmFtTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybE9iamVjdDtcbn1cblxuZnVuY3Rpb24qIGdlbmVyYXRlVVJMVmFyaWF0aW9ucyh1cmwsIHsgaWdub3JlVVJMUGFyYW1ldGVyc01hdGNoaW5nID0gW1xuICAgIC9edXRtXy8sXG4gICAgL15mYmNsaWQkL1xuXSwgZGlyZWN0b3J5SW5kZXggPSBcImluZGV4Lmh0bWxcIiwgY2xlYW5VUkxzID0gdHJ1ZSwgdXJsTWFuaXB1bGF0aW9uIH0gPSB7fSkge1xuICAgIGNvbnN0IHVybE9iamVjdCA9IG5ldyBVUkwodXJsLCBsb2NhdGlvbi5ocmVmKTtcbiAgICB1cmxPYmplY3QuaGFzaCA9IFwiXCI7XG4gICAgeWllbGQgdXJsT2JqZWN0LmhyZWY7XG4gICAgY29uc3QgdXJsV2l0aG91dElnbm9yZWRQYXJhbXMgPSByZW1vdmVJZ25vcmVkU2VhcmNoUGFyYW1zKHVybE9iamVjdCwgaWdub3JlVVJMUGFyYW1ldGVyc01hdGNoaW5nKTtcbiAgICB5aWVsZCB1cmxXaXRob3V0SWdub3JlZFBhcmFtcy5ocmVmO1xuICAgIGlmIChkaXJlY3RvcnlJbmRleCAmJiB1cmxXaXRob3V0SWdub3JlZFBhcmFtcy5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0b3J5VVJMID0gbmV3IFVSTCh1cmxXaXRob3V0SWdub3JlZFBhcmFtcy5ocmVmKTtcbiAgICAgICAgZGlyZWN0b3J5VVJMLnBhdGhuYW1lICs9IGRpcmVjdG9yeUluZGV4O1xuICAgICAgICB5aWVsZCBkaXJlY3RvcnlVUkwuaHJlZjtcbiAgICB9XG4gICAgaWYgKGNsZWFuVVJMcykge1xuICAgICAgICBjb25zdCBjbGVhblVSTCA9IG5ldyBVUkwodXJsV2l0aG91dElnbm9yZWRQYXJhbXMuaHJlZik7XG4gICAgICAgIGNsZWFuVVJMLnBhdGhuYW1lICs9IFwiLmh0bWxcIjtcbiAgICAgICAgeWllbGQgY2xlYW5VUkwuaHJlZjtcbiAgICB9XG4gICAgaWYgKHVybE1hbmlwdWxhdGlvbikge1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsVVJMcyA9IHVybE1hbmlwdWxhdGlvbih7XG4gICAgICAgICAgICB1cmw6IHVybE9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChjb25zdCB1cmxUb0F0dGVtcHQgb2YgYWRkaXRpb25hbFVSTHMpe1xuICAgICAgICAgICAgeWllbGQgdXJsVG9BdHRlbXB0LmhyZWY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFByZWNhY2hlUm91dGUgZXh0ZW5kcyBSb3V0ZSB7XG4gICAgY29uc3RydWN0b3IocHJlY2FjaGVDb250cm9sbGVyLCBvcHRpb25zKXtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSAoeyByZXF1ZXN0IH0pPT57XG4gICAgICAgICAgICBjb25zdCB1cmxzVG9DYWNoZUtleXMgPSBwcmVjYWNoZUNvbnRyb2xsZXIuZ2V0VVJMc1RvQ2FjaGVLZXlzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBvc3NpYmxlVVJMIG9mIGdlbmVyYXRlVVJMVmFyaWF0aW9ucyhyZXF1ZXN0LnVybCwgb3B0aW9ucykpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gdXJsc1RvQ2FjaGVLZXlzLmdldChwb3NzaWJsZVVSTCk7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVncml0eSA9IHByZWNhY2hlQ29udHJvbGxlci5nZXRJbnRlZ3JpdHlGb3JDYWNoZUtleShjYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVncml0eVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFByZWNhY2hpbmcgZGlkIG5vdCBmaW5kIGEgbWF0Y2ggZm9yICR7Z2V0RnJpZW5kbHlVUkwocmVxdWVzdC51cmwpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICBzdXBlcihtYXRjaCwgcHJlY2FjaGVDb250cm9sbGVyLnN0cmF0ZWd5KTtcbiAgICB9XG59XG5cbmNvbnN0IFNVQlNUUklOR19UT19GSU5EID0gXCItcHJlY2FjaGUtXCI7XG5jb25zdCBkZWxldGVPdXRkYXRlZENhY2hlcyA9IGFzeW5jIChjdXJyZW50UHJlY2FjaGVOYW1lLCBzdWJzdHJpbmdUb0ZpbmQgPSBTVUJTVFJJTkdfVE9fRklORCk9PntcbiAgICBjb25zdCBjYWNoZU5hbWVzID0gYXdhaXQgc2VsZi5jYWNoZXMua2V5cygpO1xuICAgIGNvbnN0IGNhY2hlTmFtZXNUb0RlbGV0ZSA9IGNhY2hlTmFtZXMuZmlsdGVyKChjYWNoZU5hbWUpPT57XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWUuaW5jbHVkZXMoc3Vic3RyaW5nVG9GaW5kKSAmJiBjYWNoZU5hbWUuaW5jbHVkZXMoc2VsZi5yZWdpc3RyYXRpb24uc2NvcGUpICYmIGNhY2hlTmFtZSAhPT0gY3VycmVudFByZWNhY2hlTmFtZTtcbiAgICB9KTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChjYWNoZU5hbWVzVG9EZWxldGUubWFwKChjYWNoZU5hbWUpPT5zZWxmLmNhY2hlcy5kZWxldGUoY2FjaGVOYW1lKSkpO1xuICAgIHJldHVybiBjYWNoZU5hbWVzVG9EZWxldGU7XG59O1xuXG5jb25zdCBjbGVhbnVwT3V0ZGF0ZWRDYWNoZXMgPSAoKT0+e1xuICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImFjdGl2YXRlXCIsIChldmVudCk9PntcbiAgICAgICAgY29uc3QgY2FjaGVOYW1lID0gcHJpdmF0ZUNhY2hlTmFtZXMuZ2V0UHJlY2FjaGVOYW1lKCk7XG4gICAgICAgIGV2ZW50LndhaXRVbnRpbChkZWxldGVPdXRkYXRlZENhY2hlcyhjYWNoZU5hbWUpLnRoZW4oKGNhY2hlc0RlbGV0ZWQpPT57XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlc0RlbGV0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiVGhlIGZvbGxvd2luZyBvdXQtb2YtZGF0ZSBwcmVjYWNoZXMgd2VyZSBjbGVhbmVkIHVwIGF1dG9tYXRpY2FsbHk6XCIsIGNhY2hlc0RlbGV0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufTtcblxuY29uc3QgY3JlYXRlSGFuZGxlckJvdW5kVG9VUkwgPSAodXJsKT0+e1xuICAgIGNvbnN0IHByZWNhY2hlQ29udHJvbGxlciA9IGdldFNpbmdsZXRvblByZWNhY2hlQ29udHJvbGxlcigpO1xuICAgIHJldHVybiBwcmVjYWNoZUNvbnRyb2xsZXIuY3JlYXRlSGFuZGxlckJvdW5kVG9VUkwodXJsKTtcbn07XG5cbmNvbnN0IGFkZFJvdXRlID0gKG9wdGlvbnMpPT57XG4gICAgY29uc3QgcHJlY2FjaGVDb250cm9sbGVyID0gZ2V0U2luZ2xldG9uUHJlY2FjaGVDb250cm9sbGVyKCk7XG4gICAgY29uc3QgcHJlY2FjaGVSb3V0ZSA9IG5ldyBQcmVjYWNoZVJvdXRlKHByZWNhY2hlQ29udHJvbGxlciwgb3B0aW9ucyk7XG4gICAgcmVnaXN0ZXJSb3V0ZShwcmVjYWNoZVJvdXRlKTtcbn07XG5cbmNvbnN0IHByZWNhY2hlID0gKGVudHJpZXMpPT57XG4gICAgY29uc3QgcHJlY2FjaGVDb250cm9sbGVyID0gZ2V0U2luZ2xldG9uUHJlY2FjaGVDb250cm9sbGVyKCk7XG4gICAgcHJlY2FjaGVDb250cm9sbGVyLnByZWNhY2hlKGVudHJpZXMpO1xufTtcblxuY29uc3QgcHJlY2FjaGVBbmRSb3V0ZSA9IChlbnRyaWVzLCBvcHRpb25zKT0+e1xuICAgIHByZWNhY2hlKGVudHJpZXMpO1xuICAgIGFkZFJvdXRlKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0IHsgUHJlY2FjaGVSb3V0ZSBhcyBQLCBjcmVhdGVIYW5kbGVyQm91bmRUb1VSTCBhcyBhLCBhZGRSb3V0ZSBhcyBiLCBjbGVhbnVwT3V0ZGF0ZWRDYWNoZXMgYXMgYywgcHJlY2FjaGUgYXMgZCwgcHJlY2FjaGVBbmRSb3V0ZSBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/precacheAndRoute.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/registerRoute.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/registerRoute.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: function() { return /* binding */ registerRoute; }\n/* harmony export */ });\n/* harmony import */ var _singletonRouter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n\n\nconst registerRoute = (capture, handler, method)=>{\n    return (0,_singletonRouter_js__WEBPACK_IMPORTED_MODULE_0__.g)().registerCapture(capture, handler, method);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvY2h1bmtzL3JlZ2lzdGVyUm91dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7O0FBRS9EO0FBQ0EsV0FBVyxzREFBa0I7QUFDN0I7O0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvQHNlcndpc3Qvc3cvZGlzdC9jaHVua3MvcmVnaXN0ZXJSb3V0ZS5qcz82NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0U2luZ2xldG9uUm91dGVyIH0gZnJvbSAnLi9zaW5nbGV0b25Sb3V0ZXIuanMnO1xuXG5jb25zdCByZWdpc3RlclJvdXRlID0gKGNhcHR1cmUsIGhhbmRsZXIsIG1ldGhvZCk9PntcbiAgICByZXR1cm4gZ2V0U2luZ2xldG9uUm91dGVyKCkucmVnaXN0ZXJDYXB0dXJlKGNhcHR1cmUsIGhhbmRsZXIsIG1ldGhvZCk7XG59O1xuXG5leHBvcnQgeyByZWdpc3RlclJvdXRlIGFzIHIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/registerRoute.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: function() { return /* binding */ PrecacheController; },\n/* harmony export */   a: function() { return /* binding */ PrecacheStrategy; },\n/* harmony export */   g: function() { return /* binding */ getSingletonPrecacheController; },\n/* harmony export */   s: function() { return /* binding */ setSingletonPrecacheController; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _serwist_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/core */ \"../../node_modules/@serwist/core/dist/index.js\");\n/* harmony import */ var _Strategy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Strategy.js */ \"../../node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n\n\n\n\nconst parallel = async (limit, array, func)=>{\n    const work = array.map((item, index)=>({\n            index,\n            item\n        }));\n    const processor = async (res)=>{\n        const results = [];\n        while(true){\n            const next = work.pop();\n            if (!next) {\n                return res(results);\n            }\n            const result = await func(next.item);\n            results.push({\n                result: result,\n                index: next.index\n            });\n        }\n    };\n    const queues = Array.from({\n        length: limit\n    }, ()=>new Promise(processor));\n    const results = (await Promise.all(queues)).flat().sort((a, b)=>a.index < b.index ? -1 : 1).map((res)=>res.result);\n    return results;\n};\n\nclass PrecacheStrategy extends _Strategy_js__WEBPACK_IMPORTED_MODULE_2__.S {\n    _fallbackToNetwork;\n    static defaultPrecacheCacheabilityPlugin = {\n        async cacheWillUpdate ({ response }) {\n            if (!response || response.status >= 400) {\n                return null;\n            }\n            return response;\n        }\n    };\n    static copyRedirectedCacheableResponsesPlugin = {\n        async cacheWillUpdate ({ response }) {\n            return response.redirected ? await (0,_serwist_core__WEBPACK_IMPORTED_MODULE_1__.copyResponse)(response) : response;\n        }\n    };\n    constructor(options = {}){\n        options.cacheName = _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        if (handler.event && handler.event.type === \"install\") {\n            return await this._handleInstall(request, handler);\n        }\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response = undefined;\n        const params = handler.params || {};\n        if (this._fallbackToNetwork) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`The precached response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)} in ${this.cacheName} was not found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== \"no-cors\" ? integrityInRequest || integrityInManifest : undefined\n            }));\n            if (integrityInManifest && noIntegrityConflict && request.mode !== \"no-cors\") {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (true) {\n                    if (wasCached) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`A response for ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)} was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        } else {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"missing-precache-entry\", {\n                cacheName: this.cacheName,\n                url: request.url\n            });\n        }\n        if (true) {\n            const cacheKey = params.cacheKey || await handler.getCacheKey(request, \"read\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Precaching is responding to: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(request.url)}`);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Serving the precached url: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View request details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(request);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(\"View response details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"bad-precaching-response\", {\n                url: request.url,\n                status: response.status\n            });\n        }\n        return response;\n    }\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()){\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n    }\n}\n\nclass PrecacheCacheKeyPlugin {\n    _precacheController;\n    constructor({ precacheController }){\n        this._precacheController = precacheController;\n    }\n    cacheKeyWillBeUsed = async ({ request, params })=>{\n        const cacheKey = params?.cacheKey || this._precacheController.getCacheKeyForURL(request.url);\n        return cacheKey ? new Request(cacheKey, {\n            headers: request.headers\n        }) : request;\n    };\n}\n\nclass PrecacheInstallReportPlugin {\n    updatedURLs = [];\n    notUpdatedURLs = [];\n    handlerWillStart = async ({ request, state })=>{\n        if (state) {\n            state.originalRequest = request;\n        }\n    };\n    cachedResponseWillBeUsed = async ({ event, state, cachedResponse })=>{\n        if (event.type === \"install\") {\n            if (state?.originalRequest && state.originalRequest instanceof Request) {\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                } else {\n                    this.updatedURLs.push(url);\n                }\n            }\n        }\n        return cachedResponse;\n    };\n}\n\nconst REVISION_SEARCH_PARAM = \"__WB_REVISION__\";\nfunction createCacheKey(entry) {\n    if (!entry) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (typeof entry === \"string\") {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-unexpected-type\", {\n            entry\n        });\n    }\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href\n        };\n    }\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href\n    };\n}\n\nconst logGroup = (groupTitle, deletedURLs)=>{\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs){\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(url);\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n};\nfunction printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`During precaching cleanup, ${deletionCount} cached request${deletionCount === 1 ? \" was\" : \"s were\"} deleted.`);\n        logGroup(\"Deleted Cache Requests\", deletedURLs);\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n    }\n}\n\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(groupTitle);\n    for (const url of urls){\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(url);\n    }\n    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n}\nfunction printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? \"\" : \"s\"}.`;\n        if (alreadyPrecachedCount > 0) {\n            message += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? \" is\" : \"s are\"} already cached.`;\n        }\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(message);\n        _nestedGroup(\"View newly precached URLs.\", urlsToPrecache);\n        _nestedGroup(\"View previously precached URLs.\", urlsAlreadyPrecached);\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n    }\n}\n\nclass PrecacheController {\n    _installAndActiveListenersAdded;\n    _concurrentPrecaching;\n    _strategy;\n    _urlsToCacheKeys = new Map();\n    _urlsToCacheModes = new Map();\n    _cacheKeysToIntegrities = new Map();\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, concurrentPrecaching = 1 } = {}){\n        this._concurrentPrecaching = concurrentPrecaching;\n        this._strategy = new PrecacheStrategy({\n            cacheName: _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.privateCacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({\n                    precacheController: this\n                })\n            ],\n            fallbackToNetwork\n        });\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    get strategy() {\n        return this._strategy;\n    }\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener(\"install\", this.install);\n            self.addEventListener(\"activate\", this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    addToCacheList(entries) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isArray(entries, {\n                moduleName: \"@serwist/precaching\",\n                className: \"PrecacheController\",\n                funcName: \"addToCacheList\",\n                paramName: \"entries\"\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries){\n            if (typeof entry === \"string\") {\n                urlsToWarnAbout.push(entry);\n            } else if (entry && !entry.integrity && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== \"string\" && entry.revision ? \"reload\" : \"default\";\n            if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-conflicting-entries\", {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey\n                });\n            }\n            if (typeof entry !== \"string\" && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"add-to-cache-list-conflicting-integrities\", {\n                        url\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Serwist is precaching URLs without revision info: ${urlsToWarnAbout.join(\", \")}\\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;\n                if (false) {} else {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    install(event) {\n        return (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.waitUntil)(event, async ()=>{\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            await parallel(this._concurrentPrecaching, Array.from(this._urlsToCacheKeys.entries()), async ([url, cacheKey])=>{\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: \"same-origin\"\n                });\n                await Promise.all(this.strategy.handleAll({\n                    event,\n                    request,\n                    url: new URL(request.url),\n                    params: {\n                        cacheKey\n                    }\n                }));\n            });\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (true) {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return {\n                updatedURLs,\n                notUpdatedURLs\n            };\n        });\n    }\n    activate(event) {\n        return (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.waitUntil)(event, async ()=>{\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedCacheRequests = [];\n            for (const request of currentlyCachedRequests){\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedCacheRequests.push(request.url);\n                }\n            }\n            if (true) {\n                printCleanupDetails(deletedCacheRequests);\n            }\n            return {\n                deletedCacheRequests\n            };\n        });\n    }\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    getCachedURLs() {\n        return [\n            ...this._urlsToCacheKeys.keys()\n        ];\n    }\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"non-precached-url\", {\n                url\n            });\n        }\n        return (options)=>{\n            options.request = new Request(url);\n            options.params = {\n                cacheKey,\n                ...options.params\n            };\n            return this.strategy.handle(options);\n        };\n    }\n}\n\nlet defaultPrecacheController = undefined;\nconst getSingletonPrecacheController = ()=>{\n    if (!defaultPrecacheController) {\n        defaultPrecacheController = new PrecacheController();\n    }\n    return defaultPrecacheController;\n};\nconst setSingletonPrecacheController = (precacheController)=>{\n    defaultPrecacheController = precacheController;\n    return defaultPrecacheController;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: function() { return /* binding */ Route; },\n/* harmony export */   a: function() { return /* binding */ RegExpRoute; },\n/* harmony export */   b: function() { return /* binding */ Router; },\n/* harmony export */   g: function() { return /* binding */ getSingletonRouter; },\n/* harmony export */   p: function() { return /* binding */ parseRoute; },\n/* harmony export */   s: function() { return /* binding */ setSingletonRouter; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n\n\nconst defaultMethod = \"GET\";\nconst validMethods = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\"\n];\n\nconst normalizeHandler = (handler)=>{\n    if (handler && typeof handler === \"object\") {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"handler\"\n            });\n        }\n        return handler;\n    }\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(handler, \"function\", {\n            moduleName: \"@serwist/routing\",\n            className: \"Route\",\n            funcName: \"constructor\",\n            paramName: \"handler\"\n        });\n    }\n    return {\n        handle: handler\n    };\n};\n\nclass Route {\n    handler;\n    match;\n    method;\n    catchHandler;\n    constructor(match, handler, method = defaultMethod){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(match, \"function\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Route\",\n                funcName: \"constructor\",\n                paramName: \"match\"\n            });\n            if (method) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isOneOf(method, validMethods, {\n                    paramName: \"method\"\n                });\n            }\n        }\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\n\nclass RegExpRoute extends Route {\n    constructor(regExp, handler, method){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(regExp, RegExp, {\n                moduleName: \"@serwist/routing\",\n                className: \"RegExpRoute\",\n                funcName: \"constructor\",\n                paramName: \"pattern\"\n            });\n        }\n        const match = ({ url })=>{\n            const result = regExp.exec(url.href);\n            if (!result) {\n                return;\n            }\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The regular expression '${regExp.toString()}' only partially matched against the cross-origin URL '${url.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\nconst parseRoute = (capture, handler, method)=>{\n    let route;\n    if (typeof capture === \"string\") {\n        const captureUrl = new URL(capture, location.href);\n        if (true) {\n            if (!(capture.startsWith(\"/\") || capture.startsWith(\"http\"))) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"invalid-string\", {\n                    moduleName: \"@serwist/routing\",\n                    funcName: \"registerRoute\",\n                    paramName: \"capture\"\n                });\n            }\n            const valueToCheck = capture.startsWith(\"http\") ? captureUrl.pathname : capture;\n            const wildcards = \"[*:?+]\";\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`The '$capture' parameter contains an Express-style wildcard character (${wildcards}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url })=>{\n            if (true) {\n                if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`${capture} only partially matches the cross-origin URL ${url.toString()}. This route will only handle cross-origin requests if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n        route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === \"function\") {\n        route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n        route = capture;\n    } else {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unsupported-route-type\", {\n            moduleName: \"@serwist/routing\",\n            funcName: \"registerRoute\",\n            paramName: \"capture\"\n        });\n    }\n    return route;\n};\n\nclass Router {\n    _routes;\n    _defaultHandlerMap;\n    _fetchListenerHandler = null;\n    _cacheListenerHandler = null;\n    _catchHandler;\n    constructor(){\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    get routes() {\n        return this._routes;\n    }\n    addFetchListener() {\n        if (!this._fetchListenerHandler) {\n            this._fetchListenerHandler = (event)=>{\n                const { request } = event;\n                const responsePromise = this.handleRequest({\n                    request,\n                    event\n                });\n                if (responsePromise) {\n                    event.respondWith(responsePromise);\n                }\n            };\n            self.addEventListener(\"fetch\", this._fetchListenerHandler);\n        }\n    }\n    removeFetchListener() {\n        if (this._fetchListenerHandler) {\n            self.removeEventListener(\"fetch\", this._fetchListenerHandler);\n            this._fetchListenerHandler = null;\n        }\n    }\n    addCacheListener() {\n        if (!this._cacheListenerHandler) {\n            this._cacheListenerHandler = (event)=>{\n                if (event.data && event.data.type === \"CACHE_URLS\") {\n                    const { payload } = event.data;\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n                    }\n                    const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                        if (typeof entry === \"string\") {\n                            entry = [\n                                entry\n                            ];\n                        }\n                        const request = new Request(...entry);\n                        return this.handleRequest({\n                            request,\n                            event\n                        });\n                    }));\n                    event.waitUntil(requestPromises);\n                    if (event.ports?.[0]) {\n                        void requestPromises.then(()=>event.ports[0].postMessage(true));\n                    }\n                }\n            };\n            self.addEventListener(\"message\", this._cacheListenerHandler);\n        }\n    }\n    removeCacheListener() {\n        if (this._cacheListenerHandler) {\n            self.removeEventListener(\"message\", this._cacheListenerHandler);\n        }\n    }\n    handleRequest({ request, event }) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"handleRequest\",\n                paramName: \"options.request\"\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith(\"http\")) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"Router only supports URLs that start with 'http'.\");\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url\n        });\n        let handler = route?.handler;\n        const debugMessages = [];\n        if (true) {\n            if (handler) {\n                debugMessages.push([\n                    \"Found a route to handle this request:\",\n                    route\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params\n                    ]);\n                }\n            }\n        }\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (true) {\n                debugMessages.push(`Failed to find a matching route. Falling back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`No route found for: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}`);\n            }\n            return;\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Router is responding to: ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}`);\n            for (const msg of debugMessages){\n                if (Array.isArray(msg)) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(...msg);\n                } else {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(msg);\n                }\n            }\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url,\n                request,\n                event,\n                params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        const catchHandler = route?.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err)=>{\n                if (catchHandler) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Error thrown when responding to:  ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}. Falling back to route's Catch Handler.`);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error thrown by:\", route);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({\n                            url,\n                            request,\n                            event,\n                            params\n                        });\n                    } catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (true) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(`Error thrown when responding to:  ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}. Falling back to global Catch Handler.`);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error thrown by:\", route);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(err);\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({\n                        url,\n                        request,\n                        event\n                    });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            const matchResult = route.match({\n                url,\n                sameOrigin,\n                request,\n                event\n            });\n            if (matchResult) {\n                if (true) {\n                    if (matchResult instanceof Promise) {\n                        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`While routing ${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.getFriendlyURL)(url)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    params = undefined;\n                } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n                    params = undefined;\n                } else if (typeof matchResult === \"boolean\") {\n                    params = undefined;\n                }\n                return {\n                    route,\n                    params\n                };\n            }\n        }\n        return {};\n    }\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    registerCapture(capture, handler, method) {\n        const route = parseRoute(capture, handler, method);\n        this.registerRoute(route);\n        return route;\n    }\n    registerRoute(route) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(route, \"match\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route.handler, \"object\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.hasMethod(route.handler, \"handle\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.handler\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isType(route.method, \"string\", {\n                moduleName: \"@serwist/routing\",\n                className: \"Router\",\n                funcName: \"registerRoute\",\n                paramName: \"route.method\"\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        this._routes.get(route.method).push(route);\n    }\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unregister-route-but-not-found-with-method\", {\n                method: route.method\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        } else {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"unregister-route-route-not-registered\");\n        }\n    }\n}\n\nlet defaultRouter = undefined;\nconst getSingletonRouter = ()=>{\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\nconst setSingletonRouter = (router)=>{\n    if (defaultRouter) {\n        defaultRouter.removeFetchListener();\n        defaultRouter.removeCacheListener();\n    }\n    defaultRouter = router;\n    defaultRouter.addFetchListener();\n    defaultRouter.addCacheListener();\n    return defaultRouter;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serwist: function() { return /* binding */ Serwist; },\n/* harmony export */   disableDevLogs: function() { return /* binding */ disableDevLogs; },\n/* harmony export */   disableNavigationPreload: function() { return /* binding */ disableNavigationPreload; },\n/* harmony export */   enableNavigationPreload: function() { return /* binding */ enableNavigationPreload; },\n/* harmony export */   fallbacks: function() { return /* binding */ fallbacks; },\n/* harmony export */   handlePrecaching: function() { return /* binding */ handlePrecaching; },\n/* harmony export */   installSerwist: function() { return /* binding */ installSerwist; },\n/* harmony export */   isNavigationPreloadSupported: function() { return /* binding */ isNavigationPreloadSupported; },\n/* harmony export */   registerRuntimeCaching: function() { return /* binding */ registerRuntimeCaching; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core */ \"../../node_modules/@serwist/core/dist/index.js\");\n/* harmony import */ var _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/PrecacheFallbackPlugin.js */ \"../../node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js\");\n/* harmony import */ var _chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/precacheAndRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/precacheAndRoute.js\");\n/* harmony import */ var _chunks_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks/singletonPrecacheController.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n/* harmony import */ var _chunks_NavigationRoute_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/NavigationRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/NavigationRoute.js\");\n/* harmony import */ var _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunks/Strategy.js */ \"../../node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _chunks_registerRoute_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunks/registerRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/registerRoute.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! idb */ \"../../node_modules/idb/build/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst disableDevLogs = ()=>{\n    self.__WB_DISABLE_DEV_LOGS = true;\n};\n\nconst fallbacks = ({ runtimeCaching, entries, precacheOptions })=>{\n    (0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.p)(entries, precacheOptions);\n    const fallbackPlugin = new _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_1__.P({\n        fallbackUrls: entries\n    });\n    runtimeCaching.forEach((cacheEntry)=>{\n        if (cacheEntry.handler instanceof _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_6__.S && !cacheEntry.handler.plugins.some((plugin)=>\"handlerDidError\" in plugin)) {\n            cacheEntry.handler.plugins.push(fallbackPlugin);\n        }\n        return cacheEntry;\n    });\n    return runtimeCaching;\n};\n\nconst isNavigationPreloadSupported = ()=>{\n    return Boolean(self.registration?.navigationPreload);\n};\nconst enableNavigationPreload = (headerValue)=>{\n    if (isNavigationPreloadSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.enable().then(()=>{\n                if (headerValue) {\n                    void self.registration.navigationPreload.setHeaderValue(headerValue);\n                }\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__.logger.log(\"Navigation preloading is enabled.\");\n                }\n            }));\n        });\n    } else {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__.logger.log(\"Navigation preloading is not supported in this browser.\");\n        }\n    }\n};\nconst disableNavigationPreload = ()=>{\n    if (isNavigationPreloadSupported()) {\n        self.addEventListener(\"activate\", (event)=>{\n            event.waitUntil(self.registration.navigationPreload.disable().then(()=>{\n                if (true) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__.logger.log(\"Navigation preloading is disabled.\");\n                }\n            }));\n        });\n    } else {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__.logger.log(\"Navigation preloading is not supported in this browser.\");\n        }\n    }\n};\n\nclass Serwist {\n    _precacheController;\n    _router;\n    constructor({ precacheController, router } = {}){\n        this._precacheController = precacheController || (0,_chunks_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_3__.g)();\n        this._router = router || (0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_5__.g)();\n    }\n    install({ precacheEntries, precacheOptions, cleanupOutdatedCaches: cleanupOutdatedCaches$1, navigateFallback, navigateFallbackAllowlist, navigateFallbackDenylist, skipWaiting = false, importScripts, navigationPreload = false, cacheId, clientsClaim: clientsClaim$1 = false, runtimeCaching, offlineAnalyticsConfig, disableDevLogs: disableDevLogs$1 = false, fallbacks: fallbacks$1 } = {}) {\n        if (!!importScripts && importScripts.length > 0) self.importScripts(...importScripts);\n        if (navigationPreload) enableNavigationPreload();\n        if (cacheId !== undefined) {\n            (0,_serwist_core__WEBPACK_IMPORTED_MODULE_0__.setCacheNameDetails)({\n                prefix: cacheId\n            });\n        }\n        if (skipWaiting) {\n            self.skipWaiting();\n        } else {\n            self.addEventListener(\"message\", (event)=>{\n                if (event.data && event.data.type === \"SKIP_WAITING\") {\n                    self.skipWaiting();\n                }\n            });\n        }\n        if (clientsClaim$1) (0,_serwist_core__WEBPACK_IMPORTED_MODULE_0__.clientsClaim)();\n        if (!!precacheEntries && precacheEntries.length > 0) {\n            this._precacheController.precache(precacheEntries);\n            this._router.registerRoute(new _chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.P(this._precacheController, precacheOptions));\n            if (cleanupOutdatedCaches$1) (0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.c)();\n            if (navigateFallback) {\n                this._router.registerRoute(new _chunks_NavigationRoute_js__WEBPACK_IMPORTED_MODULE_4__.N((0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.a)(navigateFallback), {\n                    allowlist: navigateFallbackAllowlist,\n                    denylist: navigateFallbackDenylist\n                }));\n            }\n        }\n        if (offlineAnalyticsConfig !== undefined) {\n            if (typeof offlineAnalyticsConfig === \"boolean\") {\n                offlineAnalyticsConfig && (0,_chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_1__.i)();\n            } else {\n                (0,_chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_1__.i)(offlineAnalyticsConfig);\n            }\n        }\n        if (runtimeCaching !== undefined) {\n            if (fallbacks$1 !== undefined) {\n                fallbacks({\n                    ...fallbacks$1,\n                    runtimeCaching\n                });\n            }\n            for (const entry of runtimeCaching){\n                this._router.registerRoute((0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_5__.p)(entry.matcher, entry.handler, entry.method));\n            }\n        }\n        if (disableDevLogs$1) disableDevLogs();\n    }\n}\n\nconst handlePrecaching = ({ precacheEntries, precacheOptions, cleanupOutdatedCaches: cleanupOutdatedCaches$1 = false, ...options })=>{\n    if (!!precacheEntries && precacheEntries.length > 0) {\n        (0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.p)(precacheEntries, precacheOptions);\n        if (cleanupOutdatedCaches$1) (0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.c)();\n        if (options.navigateFallback) {\n            (0,_chunks_registerRoute_js__WEBPACK_IMPORTED_MODULE_8__.r)(new _chunks_NavigationRoute_js__WEBPACK_IMPORTED_MODULE_4__.N((0,_chunks_precacheAndRoute_js__WEBPACK_IMPORTED_MODULE_2__.a)(options.navigateFallback), {\n                allowlist: options.navigateFallbackAllowlist,\n                denylist: options.navigateFallbackDenylist\n            }));\n        }\n    }\n};\n\nconst installSerwist = (options)=>{\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_7__.logger.warn(\"'installSerwist' has been deprecated. Please migrate to 'new Serwist().install()'.\");\n    }\n    const serwist = new Serwist({\n        precacheController: (0,_chunks_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_3__.g)(),\n        router: (0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_5__.g)()\n    });\n    serwist.install(options);\n};\n\nconst registerRuntimeCaching = (...runtimeCachingList)=>{\n    for (const entry of runtimeCachingList){\n        (0,_chunks_registerRoute_js__WEBPACK_IMPORTED_MODULE_8__.r)(entry.matcher, entry.handler, entry.method);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/index.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/index.plugins.js":
/*!************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/index.plugins.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROADCAST_UPDATE_DEFAULT_HEADERS: function() { return /* binding */ defaultHeadersToCheck; },\n/* harmony export */   BROADCAST_UPDATE_MESSAGE_META: function() { return /* binding */ CACHE_UPDATED_MESSAGE_META; },\n/* harmony export */   BROADCAST_UPDATE_MESSAGE_TYPE: function() { return /* binding */ CACHE_UPDATED_MESSAGE_TYPE; },\n/* harmony export */   BackgroundSyncPlugin: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.B; },\n/* harmony export */   BackgroundSyncQueue: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.Q; },\n/* harmony export */   BackgroundSyncQueueStore: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   BroadcastCacheUpdate: function() { return /* binding */ BroadcastCacheUpdate; },\n/* harmony export */   BroadcastUpdatePlugin: function() { return /* binding */ BroadcastUpdatePlugin; },\n/* harmony export */   CacheExpiration: function() { return /* binding */ CacheExpiration; },\n/* harmony export */   CacheableResponse: function() { return /* binding */ CacheableResponse; },\n/* harmony export */   CacheableResponsePlugin: function() { return /* binding */ CacheableResponsePlugin; },\n/* harmony export */   ExpirationPlugin: function() { return /* binding */ ExpirationPlugin; },\n/* harmony export */   PrecacheFallbackPlugin: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.P; },\n/* harmony export */   RangeRequestsPlugin: function() { return /* binding */ RangeRequestsPlugin; },\n/* harmony export */   StorableRequest: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.S; },\n/* harmony export */   createPartialResponse: function() { return /* binding */ createPartialResponse; },\n/* harmony export */   initializeGoogleAnalytics: function() { return /* reexport safe */ _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__.i; },\n/* harmony export */   responsesAreSame: function() { return /* binding */ responsesAreSame; }\n/* harmony export */ });\n/* harmony import */ var _chunks_PrecacheFallbackPlugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/PrecacheFallbackPlugin.js */ \"../../node_modules/@serwist/sw/dist/chunks/PrecacheFallbackPlugin.js\");\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! idb */ \"../../node_modules/idb/build/index.js\");\n/* harmony import */ var _serwist_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @serwist/core */ \"../../node_modules/@serwist/core/dist/index.js\");\n/* harmony import */ var _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n/* harmony import */ var _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunks/Strategy.js */ \"../../node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n/* harmony import */ var _chunks_singletonPrecacheController_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunks/singletonPrecacheController.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonPrecacheController.js\");\n\n\n\n\n\n\n\n\n\nconst CACHE_UPDATED_MESSAGE_TYPE = \"CACHE_UPDATED\";\nconst CACHE_UPDATED_MESSAGE_META = \"serwist-broadcast-update\";\nconst defaultNotifyAllClients = true;\nconst defaultHeadersToCheck = [\n    \"content-length\",\n    \"etag\",\n    \"last-modified\"\n];\n\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck)=>{\n    if (true) {\n        if (!(firstResponse instanceof Response && secondResponse instanceof Response)) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"invalid-responses-are-same-args\");\n        }\n    }\n    const atLeastOneHeaderAvailable = headersToCheck.some((header)=>{\n        return firstResponse.headers.has(header) && secondResponse.headers.has(header);\n    });\n    if (!atLeastOneHeaderAvailable) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Unable to determine where the response has been updated because none of the headers that would be checked are present.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Attempting to compare the following: \", firstResponse, secondResponse, headersToCheck);\n        }\n        return true;\n    }\n    return headersToCheck.every((header)=>{\n        const headerStateComparison = firstResponse.headers.has(header) === secondResponse.headers.has(header);\n        const headerValueComparison = firstResponse.headers.get(header) === secondResponse.headers.get(header);\n        return headerStateComparison && headerValueComparison;\n    });\n};\n\nconst isSafari = typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nconst defaultPayloadGenerator = (data)=>{\n    return {\n        cacheName: data.cacheName,\n        updatedURL: data.request.url\n    };\n};\nclass BroadcastCacheUpdate {\n    _headersToCheck;\n    _generatePayload;\n    _notifyAllClients;\n    constructor({ generatePayload, headersToCheck, notifyAllClients } = {}){\n        this._headersToCheck = headersToCheck || defaultHeadersToCheck;\n        this._generatePayload = generatePayload || defaultPayloadGenerator;\n        this._notifyAllClients = notifyAllClients ?? defaultNotifyAllClients;\n    }\n    async notifyIfUpdated(options) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(options.cacheName, \"string\", {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"cacheName\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(options.newResponse, Response, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"newResponse\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(options.request, Request, {\n                moduleName: \"@serwist/broadcast-update\",\n                className: \"BroadcastCacheUpdate\",\n                funcName: \"notifyIfUpdated\",\n                paramName: \"request\"\n            });\n        }\n        if (!options.oldResponse) {\n            return;\n        }\n        if (!responsesAreSame(options.oldResponse, options.newResponse, this._headersToCheck)) {\n            if (true) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(\"Newer response found (and cached) for:\", options.request.url);\n            }\n            const messageData = {\n                type: CACHE_UPDATED_MESSAGE_TYPE,\n                meta: CACHE_UPDATED_MESSAGE_META,\n                payload: this._generatePayload(options)\n            };\n            if (options.request.mode === \"navigate\") {\n                let resultingClientId;\n                if (options.event instanceof FetchEvent) {\n                    resultingClientId = options.event.resultingClientId;\n                }\n                const resultingWin = await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.resultingClientExists)(resultingClientId);\n                if (!resultingWin || isSafari) {\n                    await (0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.timeout)(3500);\n                }\n            }\n            if (this._notifyAllClients) {\n                const windows = await self.clients.matchAll({\n                    type: \"window\"\n                });\n                for (const win of windows){\n                    win.postMessage(messageData);\n                }\n            } else {\n                if (options.event instanceof FetchEvent) {\n                    const client = await self.clients.get(options.event.clientId);\n                    client?.postMessage(messageData);\n                }\n            }\n        }\n    }\n}\n\nclass BroadcastUpdatePlugin {\n    _broadcastUpdate;\n    constructor(options){\n        this._broadcastUpdate = new BroadcastCacheUpdate(options);\n    }\n    cacheDidUpdate(options) {\n        void this._broadcastUpdate.notifyIfUpdated(options);\n    }\n}\n\nclass CacheableResponse {\n    _statuses;\n    _headers;\n    constructor(config = {}){\n        if (true) {\n            if (!(config.statuses || config.headers)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"statuses-or-headers-required\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.statuses) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isArray(config.statuses, {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.statuses\"\n                });\n            }\n            if (config.headers) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.headers, \"object\", {\n                    moduleName: \"@serwist/cacheable-response\",\n                    className: \"CacheableResponse\",\n                    funcName: \"constructor\",\n                    paramName: \"config.headers\"\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        if (config.headers) {\n            this._headers = new Headers(config.headers);\n        }\n    }\n    isResponseCacheable(response) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(response, Response, {\n                moduleName: \"@serwist/cacheable-response\",\n                className: \"CacheableResponse\",\n                funcName: \"isResponseCacheable\",\n                paramName: \"response\"\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            for (const [headerName, headerValue] of this._headers.entries()){\n                if (response.headers.get(headerName) !== headerValue) {\n                    cacheable = false;\n                    break;\n                }\n            }\n        }\n        if (true) {\n            if (!cacheable) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(`The request for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.getFriendlyURL)(response.url)}' returned a response that does not meet the criteria for being cached.`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View cacheability criteria here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Cacheable statuses: ${JSON.stringify(this._statuses)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Cacheable headers: ${JSON.stringify(this._headers, null, 2)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key)=>{\n                    logFriendlyHeaders[key] = value;\n                });\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View response status and headers here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Response status: ${response.status}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Response headers: ${JSON.stringify(logFriendlyHeaders, null, 2)}`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View full response details here.\");\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(response.headers);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(response);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\n\nclass CacheableResponsePlugin {\n    _cacheableResponse;\n    constructor(config){\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n    cacheWillUpdate = async ({ response })=>{\n        if (this._cacheableResponse.isResponseCacheable(response)) {\n            return response;\n        }\n        return null;\n    };\n}\n\nconst DB_NAME = \"serwist-expiration\";\nconst CACHE_OBJECT_STORE = \"cache-entries\";\nconst normalizeURL = (unNormalizedUrl)=>{\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = \"\";\n    return url.href;\n};\nclass CacheTimestampsModel {\n    _cacheName;\n    _db = null;\n    constructor(cacheName){\n        this._cacheName = cacheName;\n    }\n    _getId(url) {\n        return `${this._cacheName}|${normalizeURL(url)}`;\n    }\n    _upgradeDb(db) {\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n            keyPath: \"id\"\n        });\n        objStore.createIndex(\"cacheName\", \"cacheName\", {\n            unique: false\n        });\n        objStore.createIndex(\"timestamp\", \"timestamp\", {\n            unique: false\n        });\n    }\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void (0,idb__WEBPACK_IMPORTED_MODULE_2__.deleteDB)(this._cacheName);\n        }\n    }\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            id: this._getId(url),\n            cacheName: this._cacheName,\n            url,\n            timestamp\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, \"readwrite\", {\n            durability: \"relaxed\"\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry?.timestamp;\n    }\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction(CACHE_OBJECT_STORE, \"readwrite\").store.index(\"timestamp\").openCursor(null, \"prev\");\n        const urlsDeleted = [];\n        let entriesNotDeletedCount = 0;\n        while(cursor){\n            const result = cursor.value;\n            if (result.cacheName === this._cacheName) {\n                if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                    cursor.delete();\n                    urlsDeleted.push(result.url);\n                } else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        return urlsDeleted;\n    }\n    async getDb() {\n        if (!this._db) {\n            this._db = await (0,idb__WEBPACK_IMPORTED_MODULE_2__.openDB)(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n            });\n        }\n        return this._db;\n    }\n}\n\nclass CacheExpiration {\n    _isRunning = false;\n    _rerunRequested = false;\n    _maxEntries;\n    _maxAgeSeconds;\n    _matchOptions;\n    _cacheName;\n    _timestampModel;\n    constructor(cacheName, config = {}){\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"constructor\",\n                paramName: \"cacheName\"\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"CacheExpiration\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ? Date.now() - this._maxAgeSeconds * 1000 : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired){\n            await cache.delete(url, this._matchOptions);\n        }\n        if (true) {\n            if (urlsExpired.length > 0) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(`Expired ${urlsExpired.length} ` + `${urlsExpired.length === 1 ? \"entry\" : \"entries\"} and removed ` + `${urlsExpired.length === 1 ? \"it\" : \"them\"} from the ` + `'${this._cacheName}' cache.`);\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Expired the following ${urlsExpired.length === 1 ? \"URL\" : \"URLs\"}:`);\n                for (const url of urlsExpired){\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(`    ${url}`);\n                }\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Cache expiration ran and found no entries to remove.\");\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            void this.expireEntries();\n        }\n    }\n    async updateTimestamp(url) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(url, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"CacheExpiration\",\n                funcName: \"updateTimestamp\",\n                paramName: \"url\"\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (true) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"expired-test-without-max-age\", {\n                    methodName: \"isURLExpired\",\n                    paramName: \"maxAgeSeconds\"\n                });\n            }\n            return false;\n        }\n        const timestamp = await this._timestampModel.getTimestamp(url);\n        const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n        return timestamp !== undefined ? timestamp < expireOlderThan : true;\n    }\n    async delete() {\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Number.POSITIVE_INFINITY);\n    }\n}\n\nclass ExpirationPlugin {\n    _config;\n    _cacheExpirations;\n    constructor(config = {}){\n        if (true) {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"max-entries-or-age-required\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\"\n                });\n            }\n            if (config.maxEntries) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxEntries, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxEntries\"\n                });\n            }\n            if (config.maxAgeSeconds) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeSeconds, \"number\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeSeconds\"\n                });\n            }\n            if (config.maxAgeFrom) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(config.maxAgeFrom, \"string\", {\n                    moduleName: \"@serwist/expiration\",\n                    className: \"ExpirationPlugin\",\n                    funcName: \"constructor\",\n                    paramName: \"config.maxAgeFrom\"\n                });\n            }\n        }\n        this._config = config;\n        this._cacheExpirations = new Map();\n        if (!this._config.maxAgeFrom) {\n            this._config.maxAgeFrom = \"last-fetched\";\n        }\n        if (this._config.purgeOnQuotaError) {\n            (0,_serwist_core__WEBPACK_IMPORTED_MODULE_3__.registerQuotaErrorCallback)(()=>this.deleteCacheAndMetadata());\n        }\n    }\n    _getCacheExpiration(cacheName) {\n        if (cacheName === _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.privateCacheNames.getRuntimeName()) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"expire-custom-caches-only\");\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    cachedResponseWillBeUsed({ event, cacheName, request, cachedResponse }) {\n        if (!cachedResponse) {\n            return null;\n        }\n        const isFresh = this._isResponseDateFresh(cachedResponse);\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        const isMaxAgeFromLastUsed = this._config.maxAgeFrom === \"last-used\";\n        const done = (async ()=>{\n            if (isMaxAgeFromLastUsed) {\n                await cacheExpiration.updateTimestamp(request.url);\n            }\n            await cacheExpiration.expireEntries();\n        })();\n        try {\n            event.waitUntil(done);\n        } catch (error) {\n            if (true) {\n                if (event instanceof FetchEvent) {\n                    _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Unable to ensure service worker stays alive when updating cache entry for '${(0,_serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.getFriendlyURL)(event.request.url)}'.`);\n                }\n            }\n        }\n        return isFresh ? cachedResponse : null;\n    }\n    _isResponseDateFresh(cachedResponse) {\n        const isMaxAgeFromLastUsed = this._config.maxAgeFrom === \"last-used\";\n        if (isMaxAgeFromLastUsed) {\n            return true;\n        }\n        const now = Date.now();\n        if (!this._config.maxAgeSeconds) {\n            return true;\n        }\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            return true;\n        }\n        return dateHeaderTimestamp >= now - this._config.maxAgeSeconds * 1000;\n    }\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has(\"date\")) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get(\"date\");\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        if (Number.isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    async cacheDidUpdate({ cacheName, request }) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(cacheName, \"string\", {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"cacheName\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/expiration\",\n                className: \"Plugin\",\n                funcName: \"cacheDidUpdate\",\n                paramName: \"request\"\n            });\n        }\n        const cacheExpiration = this._getCacheExpiration(cacheName);\n        await cacheExpiration.updateTimestamp(request.url);\n        await cacheExpiration.expireEntries();\n    }\n    async deleteCacheAndMetadata() {\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations){\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        this._cacheExpirations = new Map();\n    }\n}\n\nconst calculateEffectiveBoundaries = (blob, start, end)=>{\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(blob, Blob, {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"calculateEffectiveBoundaries\",\n            paramName: \"blob\"\n        });\n    }\n    const blobSize = blob.size;\n    if (end && end > blobSize || start && start < 0) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"range-not-satisfiable\", {\n            size: blobSize,\n            end,\n            start\n        });\n    }\n    let effectiveStart;\n    let effectiveEnd;\n    if (start !== undefined && end !== undefined) {\n        effectiveStart = start;\n        effectiveEnd = end + 1;\n    } else if (start !== undefined && end === undefined) {\n        effectiveStart = start;\n        effectiveEnd = blobSize;\n    } else if (end !== undefined && start === undefined) {\n        effectiveStart = blobSize - end;\n        effectiveEnd = blobSize;\n    }\n    return {\n        start: effectiveStart,\n        end: effectiveEnd\n    };\n};\n\nconst parseRangeHeader = (rangeHeader)=>{\n    if (true) {\n        _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isType(rangeHeader, \"string\", {\n            moduleName: \"@serwist/range-requests\",\n            funcName: \"parseRangeHeader\",\n            paramName: \"rangeHeader\"\n        });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n    if (!normalizedRangeHeader.startsWith(\"bytes=\")) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"unit-must-be-bytes\", {\n            normalizedRangeHeader\n        });\n    }\n    if (normalizedRangeHeader.includes(\",\")) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"single-range-only\", {\n            normalizedRangeHeader\n        });\n    }\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n        throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"invalid-range-values\", {\n            normalizedRangeHeader\n        });\n    }\n    return {\n        start: rangeParts[1] === \"\" ? undefined : Number(rangeParts[1]),\n        end: rangeParts[2] === \"\" ? undefined : Number(rangeParts[2])\n    };\n};\n\nconst createPartialResponse = async (request, originalResponse)=>{\n    try {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"request\"\n            });\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.assert.isInstance(originalResponse, Response, {\n                moduleName: \"@serwist/range-requests\",\n                funcName: \"createPartialResponse\",\n                paramName: \"originalResponse\"\n            });\n        }\n        if (originalResponse.status === 206) {\n            return originalResponse;\n        }\n        const rangeHeader = request.headers.get(\"range\");\n        if (!rangeHeader) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.SerwistError(\"no-range-header\");\n        }\n        const boundaries = parseRangeHeader(rangeHeader);\n        const originalBlob = await originalResponse.blob();\n        const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n        const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n        const slicedBlobSize = slicedBlob.size;\n        const slicedResponse = new Response(slicedBlob, {\n            status: 206,\n            statusText: \"Partial Content\",\n            headers: originalResponse.headers\n        });\n        slicedResponse.headers.set(\"Content-Length\", String(slicedBlobSize));\n        slicedResponse.headers.set(\"Content-Range\", `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + `${originalBlob.size}`);\n        return slicedResponse;\n    } catch (error) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Unable to construct a partial response; returning a \" + \"416 Range Not Satisfiable response instead.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupCollapsed(\"View details here.\");\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(error);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(request);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.log(originalResponse);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_1__.logger.groupEnd();\n        }\n        return new Response(\"\", {\n            status: 416,\n            statusText: \"Range Not Satisfiable\"\n        });\n    }\n};\n\nclass RangeRequestsPlugin {\n    cachedResponseWillBeUsed = async ({ request, cachedResponse })=>{\n        if (cachedResponse && request.headers.has(\"range\")) {\n            return await createPartialResponse(request, cachedResponse);\n        }\n        return cachedResponse;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvaW5kZXgucGx1Z2lucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyTjtBQUNsRjtBQUNsRztBQUNvQjtBQUN0QjtBQUNKO0FBQ0g7QUFDbUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQXFDO0FBQzdDO0FBQ0Esc0JBQXNCLGdFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNO0FBQ2xCLFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvREFBb0QsSUFBSTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQXFDO0FBQ3JELGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLDZFQUFxQjtBQUNoRTtBQUNBLDBCQUEwQiwrREFBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsWUFBWSxJQUFxQztBQUNqRDtBQUNBLDBCQUEwQixnRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLElBQXFDO0FBQ2pEO0FBQ0EsZ0JBQWdCLDBEQUFNLG9DQUFvQyxzRUFBYyxlQUFlO0FBQ3ZGLGdCQUFnQiwwREFBTTtBQUN0QixnQkFBZ0IsMERBQU0sNEJBQTRCLCtCQUErQjtBQUNqRixnQkFBZ0IsMERBQU0sMkJBQTJCLHVDQUF1QztBQUN4RixnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdCQUFnQiwwREFBTTtBQUN0QixnQkFBZ0IsMERBQU0seUJBQXlCLGdCQUFnQjtBQUMvRCxnQkFBZ0IsMERBQU0sMEJBQTBCLDRDQUE0QztBQUM1RixnQkFBZ0IsMERBQU07QUFDdEIsZ0JBQWdCLDBEQUFNO0FBQ3RCLGdCQUFnQiwwREFBTTtBQUN0QixnQkFBZ0IsMERBQU07QUFDdEIsZ0JBQWdCLDBEQUFNO0FBQ3RCLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsVUFBVTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDZDQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwyQ0FBTTtBQUNuQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQixnRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLElBQXFDO0FBQ2pEO0FBQ0EsZ0JBQWdCLDBEQUFNLDJCQUEyQixvQkFBb0IsT0FBTyxnREFBZ0QsbUJBQW1CLDBDQUEwQyxpQkFBaUIsZ0JBQWdCO0FBQzFOLGdCQUFnQiwwREFBTSw4QkFBOEIsMENBQTBDO0FBQzlGO0FBQ0Esb0JBQW9CLDBEQUFNLFlBQVksSUFBSTtBQUMxQztBQUNBLGdCQUFnQiwwREFBTTtBQUN0QixjQUFjO0FBQ2QsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQXFDO0FBQ3JELDBCQUEwQixnRUFBWTtBQUN0QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsWUFBWSxJQUFxQztBQUNqRDtBQUNBLDBCQUEwQixnRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQiwwREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUVBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxRUFBaUI7QUFDM0Msc0JBQXNCLGdFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkNBQTJDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFVBQVU7QUFDVixnQkFBZ0IsSUFBcUM7QUFDckQ7QUFDQSxvQkFBb0IsMERBQU0sb0ZBQW9GLHNFQUFjLG9CQUFvQjtBQUNoSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQyxZQUFZLElBQXFDO0FBQ2pELFlBQVksMERBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwwREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0MsUUFBUSwwREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0VBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQXFDO0FBQzdDLFFBQVEsMERBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFZO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0IsZ0VBQVk7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFZO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0VBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw2REFBNkQsMEJBQTBCLEdBQUcsNEJBQTRCLFFBQVEsa0JBQWtCO0FBQ2hKO0FBQ0EsTUFBTTtBQUNOLFlBQVksSUFBcUM7QUFDakQsWUFBWSwwREFBTSwrQ0FBK0M7QUFDakUsWUFBWSwwREFBTTtBQUNsQixZQUFZLDBEQUFNO0FBQ2xCLFlBQVksMERBQU07QUFDbEIsWUFBWSwwREFBTTtBQUNsQixZQUFZLDBEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MseUJBQXlCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeVgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC9zdy9kaXN0L2luZGV4LnBsdWdpbnMuanM/ZTc3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBCIGFzIEJhY2tncm91bmRTeW5jUGx1Z2luLCBRIGFzIEJhY2tncm91bmRTeW5jUXVldWUsIGEgYXMgQmFja2dyb3VuZFN5bmNRdWV1ZVN0b3JlLCBQIGFzIFByZWNhY2hlRmFsbGJhY2tQbHVnaW4sIFMgYXMgU3RvcmFibGVSZXF1ZXN0LCBpIGFzIGluaXRpYWxpemVHb29nbGVBbmFseXRpY3MgfSBmcm9tICcuL2NodW5rcy9QcmVjYWNoZUZhbGxiYWNrUGx1Z2luLmpzJztcbmltcG9ydCB7IFNlcndpc3RFcnJvciwgbG9nZ2VyLCBhc3NlcnQsIHJlc3VsdGluZ0NsaWVudEV4aXN0cywgdGltZW91dCwgZ2V0RnJpZW5kbHlVUkwsIHByaXZhdGVDYWNoZU5hbWVzIH0gZnJvbSAnQHNlcndpc3QvY29yZS9pbnRlcm5hbCc7XG5pbXBvcnQgeyBkZWxldGVEQiwgb3BlbkRCIH0gZnJvbSAnaWRiJztcbmltcG9ydCB7IHJlZ2lzdGVyUXVvdGFFcnJvckNhbGxiYWNrIH0gZnJvbSAnQHNlcndpc3QvY29yZSc7XG5pbXBvcnQgJy4vY2h1bmtzL3NpbmdsZXRvblJvdXRlci5qcyc7XG5pbXBvcnQgJy4vY2h1bmtzL05ldHdvcmtPbmx5LmpzJztcbmltcG9ydCAnLi9jaHVua3MvU3RyYXRlZ3kuanMnO1xuaW1wb3J0ICcuL2NodW5rcy9zaW5nbGV0b25QcmVjYWNoZUNvbnRyb2xsZXIuanMnO1xuXG5jb25zdCBDQUNIRV9VUERBVEVEX01FU1NBR0VfVFlQRSA9IFwiQ0FDSEVfVVBEQVRFRFwiO1xuY29uc3QgQ0FDSEVfVVBEQVRFRF9NRVNTQUdFX01FVEEgPSBcInNlcndpc3QtYnJvYWRjYXN0LXVwZGF0ZVwiO1xuY29uc3QgZGVmYXVsdE5vdGlmeUFsbENsaWVudHMgPSB0cnVlO1xuY29uc3QgZGVmYXVsdEhlYWRlcnNUb0NoZWNrID0gW1xuICAgIFwiY29udGVudC1sZW5ndGhcIixcbiAgICBcImV0YWdcIixcbiAgICBcImxhc3QtbW9kaWZpZWRcIlxuXTtcblxuY29uc3QgcmVzcG9uc2VzQXJlU2FtZSA9IChmaXJzdFJlc3BvbnNlLCBzZWNvbmRSZXNwb25zZSwgaGVhZGVyc1RvQ2hlY2spPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoIShmaXJzdFJlc3BvbnNlIGluc3RhbmNlb2YgUmVzcG9uc2UgJiYgc2Vjb25kUmVzcG9uc2UgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJpbnZhbGlkLXJlc3BvbnNlcy1hcmUtc2FtZS1hcmdzXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGF0TGVhc3RPbmVIZWFkZXJBdmFpbGFibGUgPSBoZWFkZXJzVG9DaGVjay5zb21lKChoZWFkZXIpPT57XG4gICAgICAgIHJldHVybiBmaXJzdFJlc3BvbnNlLmhlYWRlcnMuaGFzKGhlYWRlcikgJiYgc2Vjb25kUmVzcG9uc2UuaGVhZGVycy5oYXMoaGVhZGVyKTtcbiAgICB9KTtcbiAgICBpZiAoIWF0TGVhc3RPbmVIZWFkZXJBdmFpbGFibGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJVbmFibGUgdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSByZXNwb25zZSBoYXMgYmVlbiB1cGRhdGVkIGJlY2F1c2Ugbm9uZSBvZiB0aGUgaGVhZGVycyB0aGF0IHdvdWxkIGJlIGNoZWNrZWQgYXJlIHByZXNlbnQuXCIpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQXR0ZW1wdGluZyB0byBjb21wYXJlIHRoZSBmb2xsb3dpbmc6IFwiLCBmaXJzdFJlc3BvbnNlLCBzZWNvbmRSZXNwb25zZSwgaGVhZGVyc1RvQ2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVyc1RvQ2hlY2suZXZlcnkoKGhlYWRlcik9PntcbiAgICAgICAgY29uc3QgaGVhZGVyU3RhdGVDb21wYXJpc29uID0gZmlyc3RSZXNwb25zZS5oZWFkZXJzLmhhcyhoZWFkZXIpID09PSBzZWNvbmRSZXNwb25zZS5oZWFkZXJzLmhhcyhoZWFkZXIpO1xuICAgICAgICBjb25zdCBoZWFkZXJWYWx1ZUNvbXBhcmlzb24gPSBmaXJzdFJlc3BvbnNlLmhlYWRlcnMuZ2V0KGhlYWRlcikgPT09IHNlY29uZFJlc3BvbnNlLmhlYWRlcnMuZ2V0KGhlYWRlcik7XG4gICAgICAgIHJldHVybiBoZWFkZXJTdGF0ZUNvbXBhcmlzb24gJiYgaGVhZGVyVmFsdWVDb21wYXJpc29uO1xuICAgIH0pO1xufTtcblxuY29uc3QgaXNTYWZhcmkgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5jb25zdCBkZWZhdWx0UGF5bG9hZEdlbmVyYXRvciA9IChkYXRhKT0+e1xuICAgIHJldHVybiB7XG4gICAgICAgIGNhY2hlTmFtZTogZGF0YS5jYWNoZU5hbWUsXG4gICAgICAgIHVwZGF0ZWRVUkw6IGRhdGEucmVxdWVzdC51cmxcbiAgICB9O1xufTtcbmNsYXNzIEJyb2FkY2FzdENhY2hlVXBkYXRlIHtcbiAgICBfaGVhZGVyc1RvQ2hlY2s7XG4gICAgX2dlbmVyYXRlUGF5bG9hZDtcbiAgICBfbm90aWZ5QWxsQ2xpZW50cztcbiAgICBjb25zdHJ1Y3Rvcih7IGdlbmVyYXRlUGF5bG9hZCwgaGVhZGVyc1RvQ2hlY2ssIG5vdGlmeUFsbENsaWVudHMgfSA9IHt9KXtcbiAgICAgICAgdGhpcy5faGVhZGVyc1RvQ2hlY2sgPSBoZWFkZXJzVG9DaGVjayB8fCBkZWZhdWx0SGVhZGVyc1RvQ2hlY2s7XG4gICAgICAgIHRoaXMuX2dlbmVyYXRlUGF5bG9hZCA9IGdlbmVyYXRlUGF5bG9hZCB8fCBkZWZhdWx0UGF5bG9hZEdlbmVyYXRvcjtcbiAgICAgICAgdGhpcy5fbm90aWZ5QWxsQ2xpZW50cyA9IG5vdGlmeUFsbENsaWVudHMgPz8gZGVmYXVsdE5vdGlmeUFsbENsaWVudHM7XG4gICAgfVxuICAgIGFzeW5jIG5vdGlmeUlmVXBkYXRlZChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFzc2VydC5pc1R5cGUob3B0aW9ucy5jYWNoZU5hbWUsIFwic3RyaW5nXCIsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2Jyb2FkY2FzdC11cGRhdGVcIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQnJvYWRjYXN0Q2FjaGVVcGRhdGVcIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJub3RpZnlJZlVwZGF0ZWRcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY2FjaGVOYW1lXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXNzZXJ0LmlzSW5zdGFuY2Uob3B0aW9ucy5uZXdSZXNwb25zZSwgUmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2Jyb2FkY2FzdC11cGRhdGVcIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQnJvYWRjYXN0Q2FjaGVVcGRhdGVcIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJub3RpZnlJZlVwZGF0ZWRcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwibmV3UmVzcG9uc2VcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShvcHRpb25zLnJlcXVlc3QsIFJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2Jyb2FkY2FzdC11cGRhdGVcIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQnJvYWRjYXN0Q2FjaGVVcGRhdGVcIixcbiAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJub3RpZnlJZlVwZGF0ZWRcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwicmVxdWVzdFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMub2xkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3BvbnNlc0FyZVNhbWUob3B0aW9ucy5vbGRSZXNwb25zZSwgb3B0aW9ucy5uZXdSZXNwb25zZSwgdGhpcy5faGVhZGVyc1RvQ2hlY2spKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIk5ld2VyIHJlc3BvbnNlIGZvdW5kIChhbmQgY2FjaGVkKSBmb3I6XCIsIG9wdGlvbnMucmVxdWVzdC51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogQ0FDSEVfVVBEQVRFRF9NRVNTQUdFX1RZUEUsXG4gICAgICAgICAgICAgICAgbWV0YTogQ0FDSEVfVVBEQVRFRF9NRVNTQUdFX01FVEEsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogdGhpcy5fZ2VuZXJhdGVQYXlsb2FkKG9wdGlvbnMpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVxdWVzdC5tb2RlID09PSBcIm5hdmlnYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0aW5nQ2xpZW50SWQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZlbnQgaW5zdGFuY2VvZiBGZXRjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdGluZ0NsaWVudElkID0gb3B0aW9ucy5ldmVudC5yZXN1bHRpbmdDbGllbnRJZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0aW5nV2luID0gYXdhaXQgcmVzdWx0aW5nQ2xpZW50RXhpc3RzKHJlc3VsdGluZ0NsaWVudElkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdGluZ1dpbiB8fCBpc1NhZmFyaSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aW1lb3V0KDM1MDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9ub3RpZnlBbGxDbGllbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2luZG93cyA9IGF3YWl0IHNlbGYuY2xpZW50cy5tYXRjaEFsbCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2luZG93XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdpbiBvZiB3aW5kb3dzKXtcbiAgICAgICAgICAgICAgICAgICAgd2luLnBvc3RNZXNzYWdlKG1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmV2ZW50IGluc3RhbmNlb2YgRmV0Y2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBzZWxmLmNsaWVudHMuZ2V0KG9wdGlvbnMuZXZlbnQuY2xpZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQ/LnBvc3RNZXNzYWdlKG1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEJyb2FkY2FzdFVwZGF0ZVBsdWdpbiB7XG4gICAgX2Jyb2FkY2FzdFVwZGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5fYnJvYWRjYXN0VXBkYXRlID0gbmV3IEJyb2FkY2FzdENhY2hlVXBkYXRlKG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYWNoZURpZFVwZGF0ZShvcHRpb25zKSB7XG4gICAgICAgIHZvaWQgdGhpcy5fYnJvYWRjYXN0VXBkYXRlLm5vdGlmeUlmVXBkYXRlZChvcHRpb25zKTtcbiAgICB9XG59XG5cbmNsYXNzIENhY2hlYWJsZVJlc3BvbnNlIHtcbiAgICBfc3RhdHVzZXM7XG4gICAgX2hlYWRlcnM7XG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pe1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAoIShjb25maWcuc3RhdHVzZXMgfHwgY29uZmlnLmhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcInN0YXR1c2VzLW9yLWhlYWRlcnMtcmVxdWlyZWRcIiwge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2NhY2hlYWJsZS1yZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVhYmxlUmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5zdGF0dXNlcykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc0FycmF5KGNvbmZpZy5zdGF0dXNlcywge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2NhY2hlYWJsZS1yZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVhYmxlUmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNvbmZpZy5zdGF0dXNlc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNUeXBlKGNvbmZpZy5oZWFkZXJzLCBcIm9iamVjdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvY2FjaGVhYmxlLXJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZWFibGVSZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY29uZmlnLmhlYWRlcnNcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXR1c2VzID0gY29uZmlnLnN0YXR1c2VzO1xuICAgICAgICBpZiAoY29uZmlnLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlcnMgPSBuZXcgSGVhZGVycyhjb25maWcuaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNSZXNwb25zZUNhY2hlYWJsZShyZXNwb25zZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShyZXNwb25zZSwgUmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2NhY2hlYWJsZS1yZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDYWNoZWFibGVSZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImlzUmVzcG9uc2VDYWNoZWFibGVcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwicmVzcG9uc2VcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXNlcykge1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gdGhpcy5fc3RhdHVzZXMuaW5jbHVkZXMocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGVhZGVycyAmJiBjYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2hlYWRlck5hbWUsIGhlYWRlclZhbHVlXSBvZiB0aGlzLl9oZWFkZXJzLmVudHJpZXMoKSl7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpICE9PSBoZWFkZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKGBUaGUgcmVxdWVzdCBmb3IgJyR7Z2V0RnJpZW5kbHlVUkwocmVzcG9uc2UudXJsKX0nIHJldHVybmVkIGEgcmVzcG9uc2UgdGhhdCBkb2VzIG5vdCBtZWV0IHRoZSBjcml0ZXJpYSBmb3IgYmVpbmcgY2FjaGVkLmApO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZChcIlZpZXcgY2FjaGVhYmlsaXR5IGNyaXRlcmlhIGhlcmUuXCIpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYENhY2hlYWJsZSBzdGF0dXNlczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLl9zdGF0dXNlcyl9YCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgQ2FjaGVhYmxlIGhlYWRlcnM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5faGVhZGVycywgbnVsbCwgMil9YCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9nRnJpZW5kbHlIZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KT0+e1xuICAgICAgICAgICAgICAgICAgICBsb2dGcmllbmRseUhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZChcIlZpZXcgcmVzcG9uc2Ugc3RhdHVzIGFuZCBoZWFkZXJzIGhlcmUuXCIpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYFJlc3BvbnNlIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgUmVzcG9uc2UgaGVhZGVyczogJHtKU09OLnN0cmluZ2lmeShsb2dGcmllbmRseUhlYWRlcnMsIG51bGwsIDIpfWApO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cEVuZCgpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZChcIlZpZXcgZnVsbCByZXNwb25zZSBkZXRhaWxzIGhlcmUuXCIpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2cocmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlYWJsZTtcbiAgICB9XG59XG5cbmNsYXNzIENhY2hlYWJsZVJlc3BvbnNlUGx1Z2luIHtcbiAgICBfY2FjaGVhYmxlUmVzcG9uc2U7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgdGhpcy5fY2FjaGVhYmxlUmVzcG9uc2UgPSBuZXcgQ2FjaGVhYmxlUmVzcG9uc2UoY29uZmlnKTtcbiAgICB9XG4gICAgY2FjaGVXaWxsVXBkYXRlID0gYXN5bmMgKHsgcmVzcG9uc2UgfSk9PntcbiAgICAgICAgaWYgKHRoaXMuX2NhY2hlYWJsZVJlc3BvbnNlLmlzUmVzcG9uc2VDYWNoZWFibGUocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbn1cblxuY29uc3QgREJfTkFNRSA9IFwic2Vyd2lzdC1leHBpcmF0aW9uXCI7XG5jb25zdCBDQUNIRV9PQkpFQ1RfU1RPUkUgPSBcImNhY2hlLWVudHJpZXNcIjtcbmNvbnN0IG5vcm1hbGl6ZVVSTCA9ICh1bk5vcm1hbGl6ZWRVcmwpPT57XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCh1bk5vcm1hbGl6ZWRVcmwsIGxvY2F0aW9uLmhyZWYpO1xuICAgIHVybC5oYXNoID0gXCJcIjtcbiAgICByZXR1cm4gdXJsLmhyZWY7XG59O1xuY2xhc3MgQ2FjaGVUaW1lc3RhbXBzTW9kZWwge1xuICAgIF9jYWNoZU5hbWU7XG4gICAgX2RiID0gbnVsbDtcbiAgICBjb25zdHJ1Y3RvcihjYWNoZU5hbWUpe1xuICAgICAgICB0aGlzLl9jYWNoZU5hbWUgPSBjYWNoZU5hbWU7XG4gICAgfVxuICAgIF9nZXRJZCh1cmwpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX2NhY2hlTmFtZX18JHtub3JtYWxpemVVUkwodXJsKX1gO1xuICAgIH1cbiAgICBfdXBncmFkZURiKGRiKSB7XG4gICAgICAgIGNvbnN0IG9ialN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoQ0FDSEVfT0JKRUNUX1NUT1JFLCB7XG4gICAgICAgICAgICBrZXlQYXRoOiBcImlkXCJcbiAgICAgICAgfSk7XG4gICAgICAgIG9ialN0b3JlLmNyZWF0ZUluZGV4KFwiY2FjaGVOYW1lXCIsIFwiY2FjaGVOYW1lXCIsIHtcbiAgICAgICAgICAgIHVuaXF1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIG9ialN0b3JlLmNyZWF0ZUluZGV4KFwidGltZXN0YW1wXCIsIFwidGltZXN0YW1wXCIsIHtcbiAgICAgICAgICAgIHVuaXF1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF91cGdyYWRlRGJBbmREZWxldGVPbGREYnMoZGIpIHtcbiAgICAgICAgdGhpcy5fdXBncmFkZURiKGRiKTtcbiAgICAgICAgaWYgKHRoaXMuX2NhY2hlTmFtZSkge1xuICAgICAgICAgICAgdm9pZCBkZWxldGVEQih0aGlzLl9jYWNoZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHNldFRpbWVzdGFtcCh1cmwsIHRpbWVzdGFtcCkge1xuICAgICAgICB1cmwgPSBub3JtYWxpemVVUkwodXJsKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5fZ2V0SWQodXJsKSxcbiAgICAgICAgICAgIGNhY2hlTmFtZTogdGhpcy5fY2FjaGVOYW1lLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdGltZXN0YW1wXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKENBQ0hFX09CSkVDVF9TVE9SRSwgXCJyZWFkd3JpdGVcIiwge1xuICAgICAgICAgICAgZHVyYWJpbGl0eTogXCJyZWxheGVkXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHR4LnN0b3JlLnB1dChlbnRyeSk7XG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XG4gICAgfVxuICAgIGFzeW5jIGdldFRpbWVzdGFtcCh1cmwpIHtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgZGIuZ2V0KENBQ0hFX09CSkVDVF9TVE9SRSwgdGhpcy5fZ2V0SWQodXJsKSk7XG4gICAgICAgIHJldHVybiBlbnRyeT8udGltZXN0YW1wO1xuICAgIH1cbiAgICBhc3luYyBleHBpcmVFbnRyaWVzKG1pblRpbWVzdGFtcCwgbWF4Q291bnQpIHtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBkYi50cmFuc2FjdGlvbihDQUNIRV9PQkpFQ1RfU1RPUkUsIFwicmVhZHdyaXRlXCIpLnN0b3JlLmluZGV4KFwidGltZXN0YW1wXCIpLm9wZW5DdXJzb3IobnVsbCwgXCJwcmV2XCIpO1xuICAgICAgICBjb25zdCB1cmxzRGVsZXRlZCA9IFtdO1xuICAgICAgICBsZXQgZW50cmllc05vdERlbGV0ZWRDb3VudCA9IDA7XG4gICAgICAgIHdoaWxlKGN1cnNvcil7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjdXJzb3IudmFsdWU7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmNhY2hlTmFtZSA9PT0gdGhpcy5fY2FjaGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pblRpbWVzdGFtcCAmJiByZXN1bHQudGltZXN0YW1wIDwgbWluVGltZXN0YW1wIHx8IG1heENvdW50ICYmIGVudHJpZXNOb3REZWxldGVkQ291bnQgPj0gbWF4Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB1cmxzRGVsZXRlZC5wdXNoKHJlc3VsdC51cmwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXNOb3REZWxldGVkQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsc0RlbGV0ZWQ7XG4gICAgfVxuICAgIGFzeW5jIGdldERiKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RiKSB7XG4gICAgICAgICAgICB0aGlzLl9kYiA9IGF3YWl0IG9wZW5EQihEQl9OQU1FLCAxLCB7XG4gICAgICAgICAgICAgICAgdXBncmFkZTogdGhpcy5fdXBncmFkZURiQW5kRGVsZXRlT2xkRGJzLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kYjtcbiAgICB9XG59XG5cbmNsYXNzIENhY2hlRXhwaXJhdGlvbiB7XG4gICAgX2lzUnVubmluZyA9IGZhbHNlO1xuICAgIF9yZXJ1blJlcXVlc3RlZCA9IGZhbHNlO1xuICAgIF9tYXhFbnRyaWVzO1xuICAgIF9tYXhBZ2VTZWNvbmRzO1xuICAgIF9tYXRjaE9wdGlvbnM7XG4gICAgX2NhY2hlTmFtZTtcbiAgICBfdGltZXN0YW1wTW9kZWw7XG4gICAgY29uc3RydWN0b3IoY2FjaGVOYW1lLCBjb25maWcgPSB7fSl7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY2FjaGVOYW1lLCBcInN0cmluZ1wiLCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNhY2hlRXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNhY2hlTmFtZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghKGNvbmZpZy5tYXhFbnRyaWVzIHx8IGNvbmZpZy5tYXhBZ2VTZWNvbmRzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJtYXgtZW50cmllcy1vci1hZ2UtcmVxdWlyZWRcIiwge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNhY2hlRXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLm1heEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNUeXBlKGNvbmZpZy5tYXhFbnRyaWVzLCBcIm51bWJlclwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVFeHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjb25maWcubWF4RW50cmllc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLm1heEFnZVNlY29uZHMpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNUeXBlKGNvbmZpZy5tYXhBZ2VTZWNvbmRzLCBcIm51bWJlclwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVFeHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjb25maWcubWF4QWdlU2Vjb25kc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF4RW50cmllcyA9IGNvbmZpZy5tYXhFbnRyaWVzO1xuICAgICAgICB0aGlzLl9tYXhBZ2VTZWNvbmRzID0gY29uZmlnLm1heEFnZVNlY29uZHM7XG4gICAgICAgIHRoaXMuX21hdGNoT3B0aW9ucyA9IGNvbmZpZy5tYXRjaE9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NhY2hlTmFtZSA9IGNhY2hlTmFtZTtcbiAgICAgICAgdGhpcy5fdGltZXN0YW1wTW9kZWwgPSBuZXcgQ2FjaGVUaW1lc3RhbXBzTW9kZWwoY2FjaGVOYW1lKTtcbiAgICB9XG4gICAgYXN5bmMgZXhwaXJlRW50cmllcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUnVubmluZykge1xuICAgICAgICAgICAgdGhpcy5fcmVydW5SZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1pblRpbWVzdGFtcCA9IHRoaXMuX21heEFnZVNlY29uZHMgPyBEYXRlLm5vdygpIC0gdGhpcy5fbWF4QWdlU2Vjb25kcyAqIDEwMDAgOiAwO1xuICAgICAgICBjb25zdCB1cmxzRXhwaXJlZCA9IGF3YWl0IHRoaXMuX3RpbWVzdGFtcE1vZGVsLmV4cGlyZUVudHJpZXMobWluVGltZXN0YW1wLCB0aGlzLl9tYXhFbnRyaWVzKTtcbiAgICAgICAgY29uc3QgY2FjaGUgPSBhd2FpdCBzZWxmLmNhY2hlcy5vcGVuKHRoaXMuX2NhY2hlTmFtZSk7XG4gICAgICAgIGZvciAoY29uc3QgdXJsIG9mIHVybHNFeHBpcmVkKXtcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlLmRlbGV0ZSh1cmwsIHRoaXMuX21hdGNoT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKHVybHNFeHBpcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZ3JvdXBDb2xsYXBzZWQoYEV4cGlyZWQgJHt1cmxzRXhwaXJlZC5sZW5ndGh9IGAgKyBgJHt1cmxzRXhwaXJlZC5sZW5ndGggPT09IDEgPyBcImVudHJ5XCIgOiBcImVudHJpZXNcIn0gYW5kIHJlbW92ZWQgYCArIGAke3VybHNFeHBpcmVkLmxlbmd0aCA9PT0gMSA/IFwiaXRcIiA6IFwidGhlbVwifSBmcm9tIHRoZSBgICsgYCcke3RoaXMuX2NhY2hlTmFtZX0nIGNhY2hlLmApO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYEV4cGlyZWQgdGhlIGZvbGxvd2luZyAke3VybHNFeHBpcmVkLmxlbmd0aCA9PT0gMSA/IFwiVVJMXCIgOiBcIlVSTHNcIn06YCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1cmwgb2YgdXJsc0V4cGlyZWQpe1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGAgICAgJHt1cmx9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvZ2dlci5ncm91cEVuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJDYWNoZSBleHBpcmF0aW9uIHJhbiBhbmQgZm91bmQgbm8gZW50cmllcyB0byByZW1vdmUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fcmVydW5SZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcnVuUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2b2lkIHRoaXMuZXhwaXJlRW50cmllcygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZVRpbWVzdGFtcCh1cmwpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZSh1cmwsIFwic3RyaW5nXCIsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ2FjaGVFeHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwidXBkYXRlVGltZXN0YW1wXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcInVybFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLl90aW1lc3RhbXBNb2RlbC5zZXRUaW1lc3RhbXAodXJsLCBEYXRlLm5vdygpKTtcbiAgICB9XG4gICAgYXN5bmMgaXNVUkxFeHBpcmVkKHVybCkge1xuICAgICAgICBpZiAoIXRoaXMuX21heEFnZVNlY29uZHMpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwiZXhwaXJlZC10ZXN0LXdpdGhvdXQtbWF4LWFnZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZE5hbWU6IFwiaXNVUkxFeHBpcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJtYXhBZ2VTZWNvbmRzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBhd2FpdCB0aGlzLl90aW1lc3RhbXBNb2RlbC5nZXRUaW1lc3RhbXAodXJsKTtcbiAgICAgICAgY29uc3QgZXhwaXJlT2xkZXJUaGFuID0gRGF0ZS5ub3coKSAtIHRoaXMuX21heEFnZVNlY29uZHMgKiAxMDAwO1xuICAgICAgICByZXR1cm4gdGltZXN0YW1wICE9PSB1bmRlZmluZWQgPyB0aW1lc3RhbXAgPCBleHBpcmVPbGRlclRoYW4gOiB0cnVlO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGUoKSB7XG4gICAgICAgIHRoaXMuX3JlcnVuUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgIGF3YWl0IHRoaXMuX3RpbWVzdGFtcE1vZGVsLmV4cGlyZUVudHJpZXMoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICB9XG59XG5cbmNsYXNzIEV4cGlyYXRpb25QbHVnaW4ge1xuICAgIF9jb25maWc7XG4gICAgX2NhY2hlRXhwaXJhdGlvbnM7XG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pe1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAoIShjb25maWcubWF4RW50cmllcyB8fCBjb25maWcubWF4QWdlU2Vjb25kcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwibWF4LWVudHJpZXMtb3ItYWdlLXJlcXVpcmVkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJFeHBpcmF0aW9uUGx1Z2luXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcubWF4RW50cmllcykge1xuICAgICAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY29uZmlnLm1heEVudHJpZXMsIFwibnVtYmVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJFeHBpcmF0aW9uUGx1Z2luXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJjb25maWcubWF4RW50cmllc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLm1heEFnZVNlY29uZHMpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuaXNUeXBlKGNvbmZpZy5tYXhBZ2VTZWNvbmRzLCBcIm51bWJlclwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwiQHNlcndpc3QvZXhwaXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiRXhwaXJhdGlvblBsdWdpblwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jTmFtZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwiY29uZmlnLm1heEFnZVNlY29uZHNcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5tYXhBZ2VGcm9tKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmlzVHlwZShjb25maWcubWF4QWdlRnJvbSwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkV4cGlyYXRpb25QbHVnaW5cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNvbmZpZy5tYXhBZ2VGcm9tXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX2NhY2hlRXhwaXJhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmICghdGhpcy5fY29uZmlnLm1heEFnZUZyb20pIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5tYXhBZ2VGcm9tID0gXCJsYXN0LWZldGNoZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnB1cmdlT25RdW90YUVycm9yKSB7XG4gICAgICAgICAgICByZWdpc3RlclF1b3RhRXJyb3JDYWxsYmFjaygoKT0+dGhpcy5kZWxldGVDYWNoZUFuZE1ldGFkYXRhKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRDYWNoZUV4cGlyYXRpb24oY2FjaGVOYW1lKSB7XG4gICAgICAgIGlmIChjYWNoZU5hbWUgPT09IHByaXZhdGVDYWNoZU5hbWVzLmdldFJ1bnRpbWVOYW1lKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJleHBpcmUtY3VzdG9tLWNhY2hlcy1vbmx5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjYWNoZUV4cGlyYXRpb24gPSB0aGlzLl9jYWNoZUV4cGlyYXRpb25zLmdldChjYWNoZU5hbWUpO1xuICAgICAgICBpZiAoIWNhY2hlRXhwaXJhdGlvbikge1xuICAgICAgICAgICAgY2FjaGVFeHBpcmF0aW9uID0gbmV3IENhY2hlRXhwaXJhdGlvbihjYWNoZU5hbWUsIHRoaXMuX2NvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZUV4cGlyYXRpb25zLnNldChjYWNoZU5hbWUsIGNhY2hlRXhwaXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlRXhwaXJhdGlvbjtcbiAgICB9XG4gICAgY2FjaGVkUmVzcG9uc2VXaWxsQmVVc2VkKHsgZXZlbnQsIGNhY2hlTmFtZSwgcmVxdWVzdCwgY2FjaGVkUmVzcG9uc2UgfSkge1xuICAgICAgICBpZiAoIWNhY2hlZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0ZyZXNoID0gdGhpcy5faXNSZXNwb25zZURhdGVGcmVzaChjYWNoZWRSZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IGNhY2hlRXhwaXJhdGlvbiA9IHRoaXMuX2dldENhY2hlRXhwaXJhdGlvbihjYWNoZU5hbWUpO1xuICAgICAgICBjb25zdCBpc01heEFnZUZyb21MYXN0VXNlZCA9IHRoaXMuX2NvbmZpZy5tYXhBZ2VGcm9tID09PSBcImxhc3QtdXNlZFwiO1xuICAgICAgICBjb25zdCBkb25lID0gKGFzeW5jICgpPT57XG4gICAgICAgICAgICBpZiAoaXNNYXhBZ2VGcm9tTGFzdFVzZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjYWNoZUV4cGlyYXRpb24udXBkYXRlVGltZXN0YW1wKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGNhY2hlRXhwaXJhdGlvbi5leHBpcmVFbnRyaWVzKCk7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBldmVudC53YWl0VW50aWwoZG9uZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgRmV0Y2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgVW5hYmxlIHRvIGVuc3VyZSBzZXJ2aWNlIHdvcmtlciBzdGF5cyBhbGl2ZSB3aGVuIHVwZGF0aW5nIGNhY2hlIGVudHJ5IGZvciAnJHtnZXRGcmllbmRseVVSTChldmVudC5yZXF1ZXN0LnVybCl9Jy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRnJlc2ggPyBjYWNoZWRSZXNwb25zZSA6IG51bGw7XG4gICAgfVxuICAgIF9pc1Jlc3BvbnNlRGF0ZUZyZXNoKGNhY2hlZFJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IGlzTWF4QWdlRnJvbUxhc3RVc2VkID0gdGhpcy5fY29uZmlnLm1heEFnZUZyb20gPT09IFwibGFzdC11c2VkXCI7XG4gICAgICAgIGlmIChpc01heEFnZUZyb21MYXN0VXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcubWF4QWdlU2Vjb25kcykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZUhlYWRlclRpbWVzdGFtcCA9IHRoaXMuX2dldERhdGVIZWFkZXJUaW1lc3RhbXAoY2FjaGVkUmVzcG9uc2UpO1xuICAgICAgICBpZiAoZGF0ZUhlYWRlclRpbWVzdGFtcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVIZWFkZXJUaW1lc3RhbXAgPj0gbm93IC0gdGhpcy5fY29uZmlnLm1heEFnZVNlY29uZHMgKiAxMDAwO1xuICAgIH1cbiAgICBfZ2V0RGF0ZUhlYWRlclRpbWVzdGFtcChjYWNoZWRSZXNwb25zZSkge1xuICAgICAgICBpZiAoIWNhY2hlZFJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiZGF0ZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZUhlYWRlciA9IGNhY2hlZFJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiZGF0ZVwiKTtcbiAgICAgICAgY29uc3QgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGVIZWFkZXIpO1xuICAgICAgICBjb25zdCBoZWFkZXJUaW1lID0gcGFyc2VkRGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaGVhZGVyVGltZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWFkZXJUaW1lO1xuICAgIH1cbiAgICBhc3luYyBjYWNoZURpZFVwZGF0ZSh7IGNhY2hlTmFtZSwgcmVxdWVzdCB9KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFzc2VydC5pc1R5cGUoY2FjaGVOYW1lLCBcInN0cmluZ1wiLCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9leHBpcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlBsdWdpblwiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNhY2hlRGlkVXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcImNhY2hlTmFtZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFzc2VydC5pc0luc3RhbmNlKHJlcXVlc3QsIFJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L2V4cGlyYXRpb25cIixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUGx1Z2luXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY2FjaGVEaWRVcGRhdGVcIixcbiAgICAgICAgICAgICAgICBwYXJhbU5hbWU6IFwicmVxdWVzdFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWNoZUV4cGlyYXRpb24gPSB0aGlzLl9nZXRDYWNoZUV4cGlyYXRpb24oY2FjaGVOYW1lKTtcbiAgICAgICAgYXdhaXQgY2FjaGVFeHBpcmF0aW9uLnVwZGF0ZVRpbWVzdGFtcChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGF3YWl0IGNhY2hlRXhwaXJhdGlvbi5leHBpcmVFbnRyaWVzKCk7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZUNhY2hlQW5kTWV0YWRhdGEoKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2NhY2hlTmFtZSwgY2FjaGVFeHBpcmF0aW9uXSBvZiB0aGlzLl9jYWNoZUV4cGlyYXRpb25zKXtcbiAgICAgICAgICAgIGF3YWl0IHNlbGYuY2FjaGVzLmRlbGV0ZShjYWNoZU5hbWUpO1xuICAgICAgICAgICAgYXdhaXQgY2FjaGVFeHBpcmF0aW9uLmRlbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhY2hlRXhwaXJhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgfVxufVxuXG5jb25zdCBjYWxjdWxhdGVFZmZlY3RpdmVCb3VuZGFyaWVzID0gKGJsb2IsIHN0YXJ0LCBlbmQpPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShibG9iLCBCbG9iLCB7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L3JhbmdlLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICBmdW5jTmFtZTogXCJjYWxjdWxhdGVFZmZlY3RpdmVCb3VuZGFyaWVzXCIsXG4gICAgICAgICAgICBwYXJhbU5hbWU6IFwiYmxvYlwiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBibG9iU2l6ZSA9IGJsb2Iuc2l6ZTtcbiAgICBpZiAoZW5kICYmIGVuZCA+IGJsb2JTaXplIHx8IHN0YXJ0ICYmIHN0YXJ0IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwicmFuZ2Utbm90LXNhdGlzZmlhYmxlXCIsIHtcbiAgICAgICAgICAgIHNpemU6IGJsb2JTaXplLFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgc3RhcnRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBlZmZlY3RpdmVTdGFydDtcbiAgICBsZXQgZWZmZWN0aXZlRW5kO1xuICAgIGlmIChzdGFydCAhPT0gdW5kZWZpbmVkICYmIGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVmZmVjdGl2ZVN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIGVmZmVjdGl2ZUVuZCA9IGVuZCArIDE7XG4gICAgfSBlbHNlIGlmIChzdGFydCAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVmZmVjdGl2ZVN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIGVmZmVjdGl2ZUVuZCA9IGJsb2JTaXplO1xuICAgIH0gZWxzZSBpZiAoZW5kICE9PSB1bmRlZmluZWQgJiYgc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlZmZlY3RpdmVTdGFydCA9IGJsb2JTaXplIC0gZW5kO1xuICAgICAgICBlZmZlY3RpdmVFbmQgPSBibG9iU2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGVmZmVjdGl2ZVN0YXJ0LFxuICAgICAgICBlbmQ6IGVmZmVjdGl2ZUVuZFxuICAgIH07XG59O1xuXG5jb25zdCBwYXJzZVJhbmdlSGVhZGVyID0gKHJhbmdlSGVhZGVyKT0+e1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgYXNzZXJ0LmlzVHlwZShyYW5nZUhlYWRlciwgXCJzdHJpbmdcIiwge1xuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9yYW5nZS1yZXF1ZXN0c1wiLFxuICAgICAgICAgICAgZnVuY05hbWU6IFwicGFyc2VSYW5nZUhlYWRlclwiLFxuICAgICAgICAgICAgcGFyYW1OYW1lOiBcInJhbmdlSGVhZGVyXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRSYW5nZUhlYWRlciA9IHJhbmdlSGVhZGVyLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICghbm9ybWFsaXplZFJhbmdlSGVhZGVyLnN0YXJ0c1dpdGgoXCJieXRlcz1cIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcInVuaXQtbXVzdC1iZS1ieXRlc1wiLCB7XG4gICAgICAgICAgICBub3JtYWxpemVkUmFuZ2VIZWFkZXJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChub3JtYWxpemVkUmFuZ2VIZWFkZXIuaW5jbHVkZXMoXCIsXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJzaW5nbGUtcmFuZ2Utb25seVwiLCB7XG4gICAgICAgICAgICBub3JtYWxpemVkUmFuZ2VIZWFkZXJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJhbmdlUGFydHMgPSAvKFxcZCopLShcXGQqKS8uZXhlYyhub3JtYWxpemVkUmFuZ2VIZWFkZXIpO1xuICAgIGlmICghcmFuZ2VQYXJ0cyB8fCAhKHJhbmdlUGFydHNbMV0gfHwgcmFuZ2VQYXJ0c1syXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImludmFsaWQtcmFuZ2UtdmFsdWVzXCIsIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRSYW5nZUhlYWRlclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJhbmdlUGFydHNbMV0gPT09IFwiXCIgPyB1bmRlZmluZWQgOiBOdW1iZXIocmFuZ2VQYXJ0c1sxXSksXG4gICAgICAgIGVuZDogcmFuZ2VQYXJ0c1syXSA9PT0gXCJcIiA/IHVuZGVmaW5lZCA6IE51bWJlcihyYW5nZVBhcnRzWzJdKVxuICAgIH07XG59O1xuXG5jb25zdCBjcmVhdGVQYXJ0aWFsUmVzcG9uc2UgPSBhc3luYyAocmVxdWVzdCwgb3JpZ2luYWxSZXNwb25zZSk9PntcbiAgICB0cnkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBhc3NlcnQuaXNJbnN0YW5jZShyZXF1ZXN0LCBSZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJAc2Vyd2lzdC9yYW5nZS1yZXF1ZXN0c1wiLFxuICAgICAgICAgICAgICAgIGZ1bmNOYW1lOiBcImNyZWF0ZVBhcnRpYWxSZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZTogXCJyZXF1ZXN0XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXNzZXJ0LmlzSW5zdGFuY2Uob3JpZ2luYWxSZXNwb25zZSwgUmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBcIkBzZXJ3aXN0L3JhbmdlLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgZnVuY05hbWU6IFwiY3JlYXRlUGFydGlhbFJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lOiBcIm9yaWdpbmFsUmVzcG9uc2VcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yaWdpbmFsUmVzcG9uc2Uuc3RhdHVzID09PSAyMDYpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhbmdlSGVhZGVyID0gcmVxdWVzdC5oZWFkZXJzLmdldChcInJhbmdlXCIpO1xuICAgICAgICBpZiAoIXJhbmdlSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwibm8tcmFuZ2UtaGVhZGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJvdW5kYXJpZXMgPSBwYXJzZVJhbmdlSGVhZGVyKHJhbmdlSGVhZGVyKTtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxCbG9iID0gYXdhaXQgb3JpZ2luYWxSZXNwb25zZS5ibG9iKCk7XG4gICAgICAgIGNvbnN0IGVmZmVjdGl2ZUJvdW5kYXJpZXMgPSBjYWxjdWxhdGVFZmZlY3RpdmVCb3VuZGFyaWVzKG9yaWdpbmFsQmxvYiwgYm91bmRhcmllcy5zdGFydCwgYm91bmRhcmllcy5lbmQpO1xuICAgICAgICBjb25zdCBzbGljZWRCbG9iID0gb3JpZ2luYWxCbG9iLnNsaWNlKGVmZmVjdGl2ZUJvdW5kYXJpZXMuc3RhcnQsIGVmZmVjdGl2ZUJvdW5kYXJpZXMuZW5kKTtcbiAgICAgICAgY29uc3Qgc2xpY2VkQmxvYlNpemUgPSBzbGljZWRCbG9iLnNpemU7XG4gICAgICAgIGNvbnN0IHNsaWNlZFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKHNsaWNlZEJsb2IsIHtcbiAgICAgICAgICAgIHN0YXR1czogMjA2LFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogXCJQYXJ0aWFsIENvbnRlbnRcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IG9yaWdpbmFsUmVzcG9uc2UuaGVhZGVyc1xuICAgICAgICB9KTtcbiAgICAgICAgc2xpY2VkUmVzcG9uc2UuaGVhZGVycy5zZXQoXCJDb250ZW50LUxlbmd0aFwiLCBTdHJpbmcoc2xpY2VkQmxvYlNpemUpKTtcbiAgICAgICAgc2xpY2VkUmVzcG9uc2UuaGVhZGVycy5zZXQoXCJDb250ZW50LVJhbmdlXCIsIGBieXRlcyAke2VmZmVjdGl2ZUJvdW5kYXJpZXMuc3RhcnR9LSR7ZWZmZWN0aXZlQm91bmRhcmllcy5lbmQgLSAxfS9gICsgYCR7b3JpZ2luYWxCbG9iLnNpemV9YCk7XG4gICAgICAgIHJldHVybiBzbGljZWRSZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIlVuYWJsZSB0byBjb25zdHJ1Y3QgYSBwYXJ0aWFsIHJlc3BvbnNlOyByZXR1cm5pbmcgYSBcIiArIFwiNDE2IFJhbmdlIE5vdCBTYXRpc2ZpYWJsZSByZXNwb25zZSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZChcIlZpZXcgZGV0YWlscyBoZXJlLlwiKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coZXJyb3IpO1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhyZXF1ZXN0KTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2cob3JpZ2luYWxSZXNwb25zZSk7XG4gICAgICAgICAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiXCIsIHtcbiAgICAgICAgICAgIHN0YXR1czogNDE2LFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogXCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIlxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jbGFzcyBSYW5nZVJlcXVlc3RzUGx1Z2luIHtcbiAgICBjYWNoZWRSZXNwb25zZVdpbGxCZVVzZWQgPSBhc3luYyAoeyByZXF1ZXN0LCBjYWNoZWRSZXNwb25zZSB9KT0+e1xuICAgICAgICBpZiAoY2FjaGVkUmVzcG9uc2UgJiYgcmVxdWVzdC5oZWFkZXJzLmhhcyhcInJhbmdlXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY3JlYXRlUGFydGlhbFJlc3BvbnNlKHJlcXVlc3QsIGNhY2hlZFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkUmVzcG9uc2U7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdEhlYWRlcnNUb0NoZWNrIGFzIEJST0FEQ0FTVF9VUERBVEVfREVGQVVMVF9IRUFERVJTLCBDQUNIRV9VUERBVEVEX01FU1NBR0VfTUVUQSBhcyBCUk9BRENBU1RfVVBEQVRFX01FU1NBR0VfTUVUQSwgQ0FDSEVfVVBEQVRFRF9NRVNTQUdFX1RZUEUgYXMgQlJPQURDQVNUX1VQREFURV9NRVNTQUdFX1RZUEUsIEJyb2FkY2FzdENhY2hlVXBkYXRlLCBCcm9hZGNhc3RVcGRhdGVQbHVnaW4sIENhY2hlRXhwaXJhdGlvbiwgQ2FjaGVhYmxlUmVzcG9uc2UsIENhY2hlYWJsZVJlc3BvbnNlUGx1Z2luLCBFeHBpcmF0aW9uUGx1Z2luLCBSYW5nZVJlcXVlc3RzUGx1Z2luLCBjcmVhdGVQYXJ0aWFsUmVzcG9uc2UsIHJlc3BvbnNlc0FyZVNhbWUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/index.plugins.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/index.routing.js":
/*!************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/index.routing.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigationRoute: function() { return /* reexport safe */ _chunks_NavigationRoute_js__WEBPACK_IMPORTED_MODULE_0__.N; },\n/* harmony export */   RegExpRoute: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.a; },\n/* harmony export */   Route: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.R; },\n/* harmony export */   Router: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.b; },\n/* harmony export */   getSingletonRouter: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g; },\n/* harmony export */   parseRoute: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.p; },\n/* harmony export */   registerRoute: function() { return /* reexport safe */ _chunks_registerRoute_js__WEBPACK_IMPORTED_MODULE_2__.r; },\n/* harmony export */   setCatchHandler: function() { return /* binding */ setCatchHandler; },\n/* harmony export */   setDefaultHandler: function() { return /* binding */ setDefaultHandler; },\n/* harmony export */   setSingletonRouter: function() { return /* reexport safe */ _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.s; },\n/* harmony export */   unregisterRoute: function() { return /* binding */ unregisterRoute; }\n/* harmony export */ });\n/* harmony import */ var _chunks_NavigationRoute_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/NavigationRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/NavigationRoute.js\");\n/* harmony import */ var _chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/singletonRouter.js */ \"../../node_modules/@serwist/sw/dist/chunks/singletonRouter.js\");\n/* harmony import */ var _chunks_registerRoute_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/registerRoute.js */ \"../../node_modules/@serwist/sw/dist/chunks/registerRoute.js\");\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n\n\n\n\n\n\nconst setCatchHandler = (handler)=>{\n    (0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g)().setCatchHandler(handler);\n};\n\nconst setDefaultHandler = (handler)=>{\n    (0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g)().setDefaultHandler(handler);\n};\n\nconst unregisterRoute = (route)=>{\n    (0,_chunks_singletonRouter_js__WEBPACK_IMPORTED_MODULE_1__.g)().unregisterRoute(route);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3N3L2Rpc3QvaW5kZXgucm91dGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUU7QUFDRztBQUM0RDtBQUNuRTtBQUMvQjs7QUFFaEM7QUFDQSxJQUFJLDZEQUFrQjtBQUN0Qjs7QUFFQTtBQUNBLElBQUksNkRBQWtCO0FBQ3RCOztBQUVBO0FBQ0EsSUFBSSw2REFBa0I7QUFDdEI7O0FBRW1GIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvQHNlcndpc3Qvc3cvZGlzdC9pbmRleC5yb3V0aW5nLmpzPzFmOTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgTiBhcyBOYXZpZ2F0aW9uUm91dGUgfSBmcm9tICcuL2NodW5rcy9OYXZpZ2F0aW9uUm91dGUuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRTaW5nbGV0b25Sb3V0ZXIgfSBmcm9tICcuL2NodW5rcy9zaW5nbGV0b25Sb3V0ZXIuanMnO1xuZXhwb3J0IHsgYSBhcyBSZWdFeHBSb3V0ZSwgUiBhcyBSb3V0ZSwgYiBhcyBSb3V0ZXIsIHAgYXMgcGFyc2VSb3V0ZSwgcyBhcyBzZXRTaW5nbGV0b25Sb3V0ZXIgfSBmcm9tICcuL2NodW5rcy9zaW5nbGV0b25Sb3V0ZXIuanMnO1xuZXhwb3J0IHsgciBhcyByZWdpc3RlclJvdXRlIH0gZnJvbSAnLi9jaHVua3MvcmVnaXN0ZXJSb3V0ZS5qcyc7XG5pbXBvcnQgJ0BzZXJ3aXN0L2NvcmUvaW50ZXJuYWwnO1xuXG5jb25zdCBzZXRDYXRjaEhhbmRsZXIgPSAoaGFuZGxlcik9PntcbiAgICBnZXRTaW5nbGV0b25Sb3V0ZXIoKS5zZXRDYXRjaEhhbmRsZXIoaGFuZGxlcik7XG59O1xuXG5jb25zdCBzZXREZWZhdWx0SGFuZGxlciA9IChoYW5kbGVyKT0+e1xuICAgIGdldFNpbmdsZXRvblJvdXRlcigpLnNldERlZmF1bHRIYW5kbGVyKGhhbmRsZXIpO1xufTtcblxuY29uc3QgdW5yZWdpc3RlclJvdXRlID0gKHJvdXRlKT0+e1xuICAgIGdldFNpbmdsZXRvblJvdXRlcigpLnVucmVnaXN0ZXJSb3V0ZShyb3V0ZSk7XG59O1xuXG5leHBvcnQgeyBnZXRTaW5nbGV0b25Sb3V0ZXIsIHNldENhdGNoSGFuZGxlciwgc2V0RGVmYXVsdEhhbmRsZXIsIHVucmVnaXN0ZXJSb3V0ZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/index.routing.js\n"));

/***/ }),

/***/ "../../node_modules/@serwist/sw/dist/index.strategies.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@serwist/sw/dist/index.strategies.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheFirst: function() { return /* binding */ CacheFirst; },\n/* harmony export */   CacheOnly: function() { return /* binding */ CacheOnly; },\n/* harmony export */   NetworkFirst: function() { return /* reexport safe */ _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.a; },\n/* harmony export */   NetworkOnly: function() { return /* reexport safe */ _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.N; },\n/* harmony export */   StaleWhileRevalidate: function() { return /* binding */ StaleWhileRevalidate; },\n/* harmony export */   Strategy: function() { return /* reexport safe */ _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S; },\n/* harmony export */   StrategyHandler: function() { return /* reexport safe */ _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.a; }\n/* harmony export */ });\n/* harmony import */ var _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @serwist/core/internal */ \"../../node_modules/@serwist/core/dist/index.internal.js\");\n/* harmony import */ var _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/Strategy.js */ \"../../node_modules/@serwist/sw/dist/chunks/Strategy.js\");\n/* harmony import */ var _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/NetworkOnly.js */ \"../../node_modules/@serwist/sw/dist/chunks/NetworkOnly.js\");\n\n\n\n\n\n\nclass CacheFirst extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (true) {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (true) {\n                if (response) {\n                    logs.push(\"Got response from network.\");\n                } else {\n                    logs.push(\"Unable to get a response from the network.\");\n                }\n            }\n        } else {\n            if (true) {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\nclass CacheOnly extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    async _handle(request, handler) {\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"makeRequest\",\n                paramName: \"request\"\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            if (response) {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`Found a cached response in the '${this.cacheName}' cache.`);\n                _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            } else {\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url\n            });\n        }\n        return response;\n    }\n}\n\nclass StaleWhileRevalidate extends _chunks_Strategy_js__WEBPACK_IMPORTED_MODULE_1__.S {\n    constructor(options = {}){\n        super(options);\n        if (!this.plugins.some((p)=>\"cacheWillUpdate\" in p)) {\n            this.plugins.unshift(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.c);\n        }\n    }\n    async _handle(request, handler) {\n        const logs = [];\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.assert.isInstance(request, Request, {\n                moduleName: \"@serwist/strategies\",\n                className: this.constructor.name,\n                funcName: \"handle\",\n                paramName: \"request\"\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(()=>{});\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (response) {\n            if (true) {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);\n            }\n        } else {\n            if (true) {\n                logs.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            } catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (true) {\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupCollapsed(_chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.strategyStart(this.constructor.name, request));\n            for (const log of logs){\n                _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(log);\n            }\n            _chunks_NetworkOnly_js__WEBPACK_IMPORTED_MODULE_2__.m.printFinalResponse(response);\n            _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.logger.groupEnd();\n        }\n        if (!response) {\n            throw new _serwist_core_internal__WEBPACK_IMPORTED_MODULE_0__.SerwistError(\"no-response\", {\n                url: request.url,\n                error\n            });\n        }\n        return response;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@serwist/sw/dist/index.strategies.js\n"));

/***/ }),

/***/ "../../node_modules/idb/build/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/idb/build/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteDB: function() { return /* binding */ deleteDB; },\n/* harmony export */   openDB: function() { return /* binding */ openDB; },\n/* harmony export */   unwrap: function() { return /* binding */ unwrap; },\n/* harmony export */   wrap: function() { return /* binding */ wrap; }\n/* harmony export */ });\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/idb/build/index.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	!function() {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = function() {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: function(script) { return script; }
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	!function() {
/******/ 		__webpack_require__.ts = function(script) { return __webpack_require__.tt().createScript(script); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	!function() {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push(function(options) {
/******/ 			var originalFactory = options.factory;
/******/ 			options.factory = function(moduleObject, moduleExports, webpackRequire) {
/******/ 				var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				var cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : function() {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/sw.ts");
/******/ 	
/******/ })()
;