events {
    worker_connections 1024; # Adjust as needed based on server capacity
}

http {
    # Rate Limiting Zone
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s; # Adjust rate as needed

    # Request Size Limiting
    client_max_body_size 10M;

    upstream userService {
        server localhost:USER_MS_PORT; # Replace with your User Service address
    }

    upstream validateService {
        server localhost:VALIDATE_MS_PORT; # Replace with your Validate Service address
    }

    upstream orderService {
        server localhost:ORDER_MS_PORT; # Replace with your Order Service address
    }

    upstream dashboardService {
        server localhost:DASHBOARD_MS_PORT; # Replace with your Dashboard Service address
    }

    server {
        listen 8080;
        listen 443 ssl;
        http2; # Enable SSL/TLS
        ssl_certificate /path/to/your/certificate.pem; # SSL certificate
        ssl_certificate_key /path/to/your/private.key; # SSL certificate key
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

        # No validation on these URLs
        location ~ ^/user/(auth|callback).*/ {
	        rewrite ^/user(/.*)$ $1 break;
            proxy_pass http://userService;
        }

        location / {
            auth_request /validate;
            error_page 401 403 = @error401;

            # Applying rate limiting
            limit_req zone=mylimit burst=5 nodelay;

            location /user/ {
                rewrite ^/user(/.*)$ $1 break;
                proxy_pass http://userService;
            }

            location /order/ {
                rewrite ^/order(/.*)$ $1 break;
                proxy_pass http://orderService;
            }

            location /dashboard/ {
                rewrite ^/dashboard(/.*)$ $1 break;
                proxy_pass http://dashboardService;
            }
        }

        location /validate {
            internal;
            proxy_pass http://validateService/validate;
            proxy_set_header Content-Type "application/json";
            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_body off;
            proxy_set_header X-Original-URI $request_uri;
        }

        location @error401 {
            return 401 'Unauthorized';
        }

        # Enable access and error logs for monitoring
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}

# Ensure to replace USER_MS_PORT, VALIDATE_MS_PORT, ORDER_MS_PORT, DASHBOARD_MS_PORT with actual port numbers
